# MITA Finance - Production Values Configuration
# Enterprise-grade configuration for financial services platform

# Global Configuration
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: "gp3-encrypted"

# Application Configuration
app:
  name: mita-backend
  version: "1.0.0"
  
# Image Configuration
image:
  registry: ghcr.io
  repository: mita-finance/backend
  tag: "v1.0.0"
  pullPolicy: IfNotPresent
  pullSecrets: 
    - name: ghcr-secret

# Deployment Configuration
replicaCount: 5
maxUnavailable: 0
maxSurge: 2

# Service Configuration
service:
  type: ClusterIP
  port: 80
  targetPort: 8000
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "http"

# Resource Management (Financial-grade requirements)
resources:
  requests:
    cpu: 1000m
    memory: 2Gi
    ephemeral-storage: 2Gi
  limits:
    cpu: 4000m
    memory: 4Gi
    ephemeral-storage: 4Gi

# Horizontal Pod Autoscaler
autoscaling:
  enabled: true
  minReplicas: 5
  maxReplicas: 20
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 60
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 70
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 3

# Ingress Configuration
ingress:
  enabled: true
  className: nginx
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/rate-limit: "1000"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "Authorization, Content-Type"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    external-dns.alpha.kubernetes.io/hostname: "api.mita.finance"
  hosts:
    - host: api.mita.finance
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: mita-api-tls
      hosts:
        - api.mita.finance

# Environment Variables
environment: production
debug: false
logLevel: INFO

# Security Configuration
security:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000
  seccompProfile:
    type: RuntimeDefault
  capabilities:
    drop:
      - ALL
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: false

# Network Policies
networkPolicy:
  enabled: true
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
      - namespaceSelector:
          matchLabels:
            name: nginx-ingress
      - podSelector:
          matchLabels:
            app.kubernetes.io/name: nginx-ingress
      ports:
      - protocol: TCP
        port: 8000
  egress:
    # Database access
    - to: []
      ports:
      - protocol: TCP
        port: 5432
    # Redis access
    - to: []
      ports:
      - protocol: TCP
        port: 6379
    # HTTPS outbound for APIs
    - to: []
      ports:
      - protocol: TCP
        port: 443
    # DNS resolution
    - to: []
      ports:
      - protocol: TCP
        port: 53
      - protocol: UDP
        port: 53

# Health Checks
healthChecks:
  enabled: true
  livenessProbe:
    httpGet:
      path: /health
      port: 8000
      scheme: HTTP
    initialDelaySeconds: 45
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 3
    successThreshold: 1
  readinessProbe:
    httpGet:
      path: /health/ready
      port: 8000
      scheme: HTTP
    initialDelaySeconds: 15
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
  startupProbe:
    httpGet:
      path: /health
      port: 8000
      scheme: HTTP
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 30

# Background Services Configuration
worker:
  enabled: true
  replicaCount: 3
  resources:
    requests:
      cpu: 500m
      memory: 1Gi
    limits:
      cpu: 2000m
      memory: 2Gi

scheduler:
  enabled: true
  replicaCount: 2
  resources:
    requests:
      cpu: 200m
      memory: 512Mi
    limits:
      cpu: 1000m
      memory: 1Gi

# Database Configuration (External RDS)
database:
  enabled: false  # Using external RDS
  host: ""  # Set via secrets
  port: 5432
  database: mita
  sslMode: require
  connectionPool:
    minSize: 10
    maxSize: 50
    maxIdleTime: 300

# Redis Configuration (External ElastiCache)
redis:
  enabled: false  # Using external ElastiCache
  host: ""  # Set via secrets
  port: 6379
  database: 0
  ssl: true
  cluster:
    enabled: true

# Secrets Configuration
secrets:
  create: true
  annotations: {}
  data:
    # These will be populated by external-secrets operator
    database-url: ""
    redis-url: ""
    jwt-secret: ""
    secret-key: ""
    openai-api-key: ""
    sentry-dsn: ""
    stripe-api-key: ""
    google-client-secret: ""

# ConfigMap Configuration
configMap:
  create: true
  data:
    ENVIRONMENT: "production"
    DEBUG: "false"
    LOG_LEVEL: "INFO"
    LOG_FORMAT: "json"
    CORS_ORIGINS: "https://app.mita.finance"
    API_PREFIX: "/api/v1"
    RATE_LIMIT_REQUESTS: "1000"
    RATE_LIMIT_WINDOW: "60"

# Monitoring Configuration
monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
    namespace: monitoring
    interval: 30s
    path: /metrics
    scrapeTimeout: 10s
    labels:
      app: mita-backend
      release: prometheus
  prometheusRule:
    enabled: true
    namespace: monitoring
    labels:
      app: mita-backend
      release: prometheus

# Logging Configuration
logging:
  enabled: true
  level: INFO
  format: json
  structured: true
  
# Backup Configuration
backup:
  enabled: true
  schedule: "0 2 * * *"  # Daily at 2 AM UTC
  retention: "30d"
  s3:
    bucket: mita-production-backups
    region: us-east-1

# Node Affinity and Tolerations
nodeSelector: {}

affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - mita-backend
        topologyKey: kubernetes.io/hostname

tolerations: []

# Volumes
volumes:
  - name: tmp
    emptyDir:
      sizeLimit: 1Gi
  - name: app-logs
    emptyDir:
      sizeLimit: 2Gi
  - name: prometheus-metrics
    emptyDir:
      sizeLimit: 100Mi

volumeMounts:
  - name: tmp
    mountPath: /tmp
  - name: app-logs
    mountPath: /app/logs
  - name: prometheus-metrics
    mountPath: /tmp/prometheus_multiproc

# Service Account
serviceAccount:
  create: true
  annotations:
    eks.amazonaws.com/role-arn: ""  # To be set by external configuration
  name: mita-backend

# External Dependencies Configuration
postgresql:
  enabled: false  # Using external RDS

redis:
  enabled: false  # Using external ElastiCache

# Migration Job
migration:
  enabled: true
  image:
    repository: ghcr.io/mita-finance/backend
    tag: "v1.0.0"
  restartPolicy: Never
  backoffLimit: 3
  resources:
    requests:
      cpu: 100m
      memory: 256Mi
    limits:
      cpu: 500m
      memory: 512Mi

# InitContainer for database migration
initContainers:
  - name: migration
    image: "ghcr.io/mita-finance/backend:v1.0.0"
    command: ["python", "-m", "alembic", "upgrade", "head"]
    envFrom:
      - secretRef:
          name: mita-backend-secrets
    resources:
      requests:
        cpu: 100m
        memory: 256Mi
      limits:
        cpu: 500m
        memory: 512Mi

# Pod Security Standards
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000
  seccompProfile:
    type: RuntimeDefault

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: false
  runAsNonRoot: true
  runAsUser: 1000