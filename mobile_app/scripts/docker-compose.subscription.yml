# =====================================================================
# MITA Subscription Management - Docker Compose Configuration
# =====================================================================
# Production-ready Docker Compose setup for subscription management
# with monitoring, database, and supporting services.

version: '3.8'

services:
  # =====================================================================
  # Subscription Manager Service
  # =====================================================================
  subscription-manager:
    build:
      context: .
      dockerfile: Dockerfile.subscription-manager
      args:
        BUILD_DATE: ${BUILD_DATE:-2024-01-01T00:00:00Z}
        VCS_REF: ${VCS_REF:-unknown}
        VERSION: ${VERSION:-1.0.0}
    image: mita/subscription-manager:${VERSION:-latest}
    container_name: mita-subscription-manager
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
    environment:
      - MITA_ENV=production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-mita}
      - DB_USER=${DB_USER:-mita_subscription}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_URL=redis://redis:6379/0
      - APPLE_SHARED_SECRET=${APPLE_SHARED_SECRET}
      - GOOGLE_PACKAGE_NAME=${GOOGLE_PACKAGE_NAME}
      - GOOGLE_SERVICE_ACCOUNT_FILE=/secrets/google_service_account.json
      - SENTRY_DSN=${SENTRY_DSN}
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    volumes:
      - ./config:/etc/mita:ro
      - ./secrets:/secrets:ro
      - subscription_logs:/var/log/mita
      - subscription_data:/var/lib/mita
    ports:
      - "8080:8080"  # Metrics and health endpoint
    networks:
      - mita-subscription
    healthcheck:
      test: ["CMD", "python", "/usr/local/bin/healthcheck"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  # =====================================================================
  # PostgreSQL Database
  # =====================================================================
  postgres:
    image: postgres:15-alpine
    container_name: mita-postgres-subscription
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${DB_NAME:-mita}
      - POSTGRES_USER=${DB_USER:-mita_subscription}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/subscription_schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
      - ./config/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    ports:
      - "5432:5432"
    networks:
      - mita-subscription
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-mita_subscription} -d ${DB_NAME:-mita}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G

  # =====================================================================
  # Redis Cache
  # =====================================================================
  redis:
    image: redis:7-alpine
    container_name: mita-redis-subscription
    restart: unless-stopped
    command: redis-server /etc/redis/redis.conf
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/etc/redis/redis.conf:ro
    ports:
      - "6379:6379"
    networks:
      - mita-subscription
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.1'
          memory: 128M

  # =====================================================================
  # Prometheus Monitoring
  # =====================================================================
  prometheus:
    image: prom/prometheus:v2.47.2
    container_name: mita-prometheus-subscription
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=90d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./config/alert_rules.yml:/etc/prometheus/alert_rules.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - mita-subscription
    depends_on:
      - subscription-manager
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "2"

  # =====================================================================
  # Grafana Dashboard
  # =====================================================================
  grafana:
    image: grafana/grafana:10.2.0
    container_name: mita-grafana-subscription
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./config/grafana/dashboards:/etc/grafana/dashboards:ro
    ports:
      - "3000:3000"
    networks:
      - mita-subscription
    depends_on:
      - prometheus
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "2"

  # =====================================================================
  # PostgreSQL Exporter for Prometheus
  # =====================================================================
  postgres-exporter:
    image: quay.io/prometheuscommunity/postgres-exporter:v0.15.0
    container_name: mita-postgres-exporter
    restart: unless-stopped
    environment:
      - DATA_SOURCE_NAME=postgresql://${DB_USER:-mita_subscription}:${DB_PASSWORD}@postgres:5432/${DB_NAME:-mita}?sslmode=disable
    ports:
      - "9187:9187"
    networks:
      - mita-subscription
    depends_on:
      - postgres
    security_opt:
      - no-new-privileges:true

  # =====================================================================
  # Redis Exporter for Prometheus
  # =====================================================================
  redis-exporter:
    image: oliver006/redis_exporter:v1.55.0
    container_name: mita-redis-exporter
    restart: unless-stopped
    environment:
      - REDIS_ADDR=redis://redis:6379
    ports:
      - "9121:9121"
    networks:
      - mita-subscription
    depends_on:
      - redis
    security_opt:
      - no-new-privileges:true

  # =====================================================================
  # Nginx Reverse Proxy
  # =====================================================================
  nginx:
    image: nginx:1.25-alpine
    container_name: mita-nginx-subscription
    restart: unless-stopped
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - mita-subscription
    depends_on:
      - subscription-manager
      - grafana
      - prometheus
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

# =====================================================================
# Networks
# =====================================================================
networks:
  mita-subscription:
    driver: bridge
    name: mita-subscription-network
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

# =====================================================================
# Volumes
# =====================================================================
volumes:
  postgres_data:
    driver: local
    name: mita-postgres-subscription-data
  redis_data:
    driver: local
    name: mita-redis-subscription-data
  prometheus_data:
    driver: local
    name: mita-prometheus-subscription-data
  grafana_data:
    driver: local
    name: mita-grafana-subscription-data
  subscription_logs:
    driver: local
    name: mita-subscription-logs
  subscription_data:
    driver: local
    name: mita-subscription-data

# =====================================================================
# Environment Variables File
# =====================================================================
# Create a .env file with the following variables:
#
# # Database Configuration
# DB_NAME=mita
# DB_USER=mita_subscription
# DB_PASSWORD=your_secure_password_here
#
# # Apple App Store Configuration
# APPLE_SHARED_SECRET=your_apple_shared_secret
#
# # Google Play Store Configuration
# GOOGLE_PACKAGE_NAME=com.mita.finance
#
# # Monitoring Configuration
# SENTRY_DSN=https://your-sentry-dsn@sentry.io/project-id
#
# # Grafana Configuration
# GRAFANA_ADMIN_USER=admin
# GRAFANA_ADMIN_PASSWORD=secure_admin_password
#
# # Build Configuration
# BUILD_DATE=2024-01-01T00:00:00Z
# VCS_REF=main
# VERSION=1.0.0