# =====================================================================
# MITA Subscription Manager Docker Configuration
# =====================================================================
# Multi-stage Docker build for production-ready subscription management
# service with security hardening and minimal attack surface.

# Build stage
FROM python:3.11-slim as builder

# Set build arguments
ARG BUILD_DATE
ARG VCS_REF
ARG VERSION=1.0.0

# Add labels for better container management
LABEL maintainer="MITA DevOps Team <devops@mita.com>"
LABEL org.opencontainers.image.title="MITA Subscription Manager"
LABEL org.opencontainers.image.description="Premium subscription management service"
LABEL org.opencontainers.image.version="${VERSION}"
LABEL org.opencontainers.image.created="${BUILD_DATE}"
LABEL org.opencontainers.image.revision="${VCS_REF}"
LABEL org.opencontainers.image.vendor="MITA Finance"

# Install system dependencies and security updates
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    libpq-dev \
    libssl-dev \
    libffi-dev \
    ca-certificates \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user for security
RUN groupadd -r mita && useradd -r -g mita -s /bin/false mita

# Set working directory
WORKDIR /opt/mita

# Copy requirements first for better Docker layer caching
COPY requirements.txt .
COPY requirements-prod.txt .

# Install Python dependencies with security configurations
RUN pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --no-cache-dir -r requirements-prod.txt && \
    # Remove build dependencies to reduce image size
    apt-get purge -y build-essential && \
    apt-get autoremove -y && \
    # Clear pip cache
    pip cache purge

# Production stage
FROM python:3.11-slim as production

# Copy build arguments to production stage
ARG BUILD_DATE
ARG VCS_REF
ARG VERSION=1.0.0

# Add labels
LABEL maintainer="MITA DevOps Team <devops@mita.com>"
LABEL org.opencontainers.image.title="MITA Subscription Manager"
LABEL org.opencontainers.image.version="${VERSION}"

# Install runtime dependencies and security updates
RUN apt-get update && apt-get install -y --no-install-recommends \
    libpq5 \
    ca-certificates \
    curl \
    dumb-init \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user
RUN groupadd -r mita --gid 1000 && \
    useradd -r -g mita --uid 1000 -s /bin/false -d /opt/mita mita

# Create necessary directories with proper permissions
RUN mkdir -p /opt/mita /var/log/mita /var/lib/mita /etc/mita && \
    chown -R mita:mita /opt/mita /var/log/mita /var/lib/mita /etc/mita

# Copy Python packages from builder stage
COPY --from=builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# Set working directory
WORKDIR /opt/mita

# Copy application code
COPY --chown=mita:mita scripts/ ./scripts/
COPY --chown=mita:mita config/ ./config/
COPY --chown=mita:mita templates/ ./templates/

# Create configuration files with proper permissions
RUN touch /var/log/mita/subscription_manager.log \
          /var/log/mita/subscription_audit.log \
          /var/log/mita/error.log && \
    chown mita:mita /var/log/mita/*.log

# Install health check script
COPY --chown=mita:mita scripts/healthcheck.py /usr/local/bin/healthcheck
RUN chmod +x /usr/local/bin/healthcheck

# Switch to non-root user
USER mita

# Set environment variables
ENV PYTHONPATH="/opt/mita"
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV PATH="/opt/mita/scripts:$PATH"

# Security hardening - disable Python optimizations that might mask issues
ENV PYTHONOPTIMIZE=0

# Set default configuration
ENV MITA_ENV=production
ENV MITA_LOG_LEVEL=INFO
ENV MITA_CONFIG_FILE=/etc/mita/subscription_manager.yaml

# Health check configuration
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD python /usr/local/bin/healthcheck || exit 1

# Expose metrics port (non-privileged)
EXPOSE 8080

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Default command
CMD ["python", "/opt/mita/scripts/refresh_premium_status.py", "--daemon"]

# =====================================================================
# Build and Deployment Instructions
# =====================================================================
# 
# Build command:
# docker build -f Dockerfile.subscription-manager \
#   --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
#   --build-arg VCS_REF=$(git rev-parse --short HEAD) \
#   --build-arg VERSION=1.0.0 \
#   -t mita/subscription-manager:latest .
#
# Run command:
# docker run -d \
#   --name mita-subscription-manager \
#   --restart unless-stopped \
#   -p 8080:8080 \
#   -v /etc/mita:/etc/mita:ro \
#   -v /var/log/mita:/var/log/mita \
#   -e DB_HOST=postgres.mita.internal \
#   -e DB_USER=mita_subscription \
#   -e DB_PASSWORD_FILE=/etc/mita/secrets/db_password \
#   -e APPLE_SHARED_SECRET_FILE=/etc/mita/secrets/apple_secret \
#   -e GOOGLE_SERVICE_ACCOUNT_FILE=/etc/mita/secrets/google_service_account.json \
#   -e SENTRY_DSN_FILE=/etc/mita/secrets/sentry_dsn \
#   --log-driver=json-file \
#   --log-opt max-size=10m \
#   --log-opt max-file=3 \
#   mita/subscription-manager:latest