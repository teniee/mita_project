# MITA Finance External Secrets Configuration
# Maps AWS Secrets Manager secrets to Kubernetes secrets

apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: mita-database-credentials
  namespace: ${NAMESPACE}
  labels:
    app.kubernetes.io/name: mita
    app.kubernetes.io/component: database
    secret-category: critical
  annotations:
    compliance/framework: "SOX,PCI-DSS"
    security/rotation-required: "true"
    security/criticality: "critical"
spec:
  secretStoreRef:
    name: mita-${ENVIRONMENT}-secrets
    kind: SecretStore
  target:
    name: mita-database-credentials
    creationPolicy: Owner
    deletionPolicy: Retain
    template:
      type: Opaque
      metadata:
        labels:
          app.kubernetes.io/name: mita
          app.kubernetes.io/component: database
        annotations:
          security/encrypted: "true"
          compliance/framework: "SOX,PCI-DSS"
      data:
        DATABASE_URL: "{{ .database_primary | toString }}"
        POSTGRES_HOST: "{{ .database_host | toString }}"
        POSTGRES_USER: "{{ .database_user | toString }}"
        POSTGRES_PASSWORD: "{{ .database_password | toString }}"
        POSTGRES_DB: "{{ .database_name | toString }}"
        POSTGRES_PORT: "{{ .database_port | toString }}"
        DATABASE_READONLY_URL: "{{ .database_readonly | toString }}"
  data:
    - secretKey: database_primary
      remoteRef:
        key: mita-finance/${ENVIRONMENT}/database/primary
        property: connection_string
    - secretKey: database_readonly
      remoteRef:
        key: mita-finance/${ENVIRONMENT}/database/readonly
        property: connection_string
    - secretKey: database_host
      remoteRef:
        key: mita-finance/${ENVIRONMENT}/database/primary
        property: host
    - secretKey: database_user
      remoteRef:
        key: mita-finance/${ENVIRONMENT}/database/primary
        property: username
    - secretKey: database_password
      remoteRef:
        key: mita-finance/${ENVIRONMENT}/database/primary
        property: password
    - secretKey: database_name
      remoteRef:
        key: mita-finance/${ENVIRONMENT}/database/primary
        property: database
    - secretKey: database_port
      remoteRef:
        key: mita-finance/${ENVIRONMENT}/database/primary
        property: port
  refreshInterval: 5m  # Critical secrets refreshed every 5 minutes

---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: mita-authentication-secrets
  namespace: ${NAMESPACE}
  labels:
    app.kubernetes.io/name: mita
    app.kubernetes.io/component: auth
    secret-category: critical
  annotations:
    compliance/framework: "SOX,PCI-DSS"
    security/rotation-required: "true"
    security/criticality: "critical"
spec:
  secretStoreRef:
    name: mita-${ENVIRONMENT}-secrets
    kind: SecretStore
  target:
    name: mita-auth-secrets
    creationPolicy: Owner
    deletionPolicy: Retain
    template:
      type: Opaque
      metadata:
        labels:
          app.kubernetes.io/name: mita
          app.kubernetes.io/component: auth
        annotations:
          security/encrypted: "true"
          compliance/framework: "SOX,PCI-DSS"
      data:
        JWT_SECRET: "{{ .jwt_secret | toString }}"
        JWT_PREVIOUS_SECRET: "{{ .jwt_previous_secret | toString }}"
        SECRET_KEY: "{{ .app_secret_key | toString }}"
        ALGORITHM: "HS256"
  data:
    - secretKey: jwt_secret
      remoteRef:
        key: mita-finance/${ENVIRONMENT}/auth/jwt-secret
        property: value
    - secretKey: jwt_previous_secret
      remoteRef:
        key: mita-finance/${ENVIRONMENT}/auth/jwt-previous-secret
        property: value
    - secretKey: app_secret_key
      remoteRef:
        key: mita-finance/${ENVIRONMENT}/app/secret-key
        property: value
  refreshInterval: 5m

---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: mita-cache-credentials
  namespace: ${NAMESPACE}
  labels:
    app.kubernetes.io/name: mita
    app.kubernetes.io/component: cache
    secret-category: high
  annotations:
    compliance/framework: "PCI-DSS"
    security/rotation-required: "true"
    security/criticality: "high"
spec:
  secretStoreRef:
    name: mita-${ENVIRONMENT}-secrets
    kind: SecretStore
  target:
    name: mita-redis-credentials
    creationPolicy: Owner
    deletionPolicy: Retain
    template:
      type: Opaque
      metadata:
        labels:
          app.kubernetes.io/name: mita
          app.kubernetes.io/component: cache
        annotations:
          security/encrypted: "true"
          compliance/framework: "PCI-DSS"
      data:
        REDIS_URL: "{{ .redis_url | toString }}"
        REDIS_PASSWORD: "{{ .redis_password | toString }}"
        REDIS_HOST: "{{ .redis_host | toString }}"
        REDIS_PORT: "{{ .redis_port | toString }}"
  data:
    - secretKey: redis_url
      remoteRef:
        key: mita-finance/${ENVIRONMENT}/cache/redis-auth
        property: connection_string
    - secretKey: redis_password
      remoteRef:
        key: mita-finance/${ENVIRONMENT}/cache/redis-auth
        property: password
    - secretKey: redis_host
      remoteRef:
        key: mita-finance/${ENVIRONMENT}/cache/redis-auth
        property: host
    - secretKey: redis_port
      remoteRef:
        key: mita-finance/${ENVIRONMENT}/cache/redis-auth
        property: port
  refreshInterval: 15m  # High priority secrets refreshed every 15 minutes

---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: mita-external-api-secrets
  namespace: ${NAMESPACE}
  labels:
    app.kubernetes.io/name: mita
    app.kubernetes.io/component: external-apis
    secret-category: high
  annotations:
    compliance/framework: "DATA-PROTECTION"
    security/rotation-required: "true"
    security/criticality: "high"
spec:
  secretStoreRef:
    name: mita-${ENVIRONMENT}-secrets
    kind: SecretStore
  target:
    name: mita-external-api-secrets
    creationPolicy: Owner
    deletionPolicy: Retain
    template:
      type: Opaque
      metadata:
        labels:
          app.kubernetes.io/name: mita
          app.kubernetes.io/component: external-apis
        annotations:
          security/encrypted: "true"
          compliance/framework: "DATA-PROTECTION"
      data:
        OPENAI_API_KEY: "{{ .openai_api_key | toString }}"
        OPENAI_MODEL: "gpt-4o-mini"
        SENTRY_DSN: "{{ .sentry_dsn | toString }}"
  data:
    - secretKey: openai_api_key
      remoteRef:
        key: mita-finance/${ENVIRONMENT}/external/openai-api-key
        property: value
    - secretKey: sentry_dsn
      remoteRef:
        key: mita-finance/${ENVIRONMENT}/monitoring/sentry-dsn
        property: value
  refreshInterval: 15m

---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: mita-notification-secrets
  namespace: ${NAMESPACE}
  labels:
    app.kubernetes.io/name: mita
    app.kubernetes.io/component: notifications
    secret-category: medium
  annotations:
    compliance/framework: "GDPR"
    security/rotation-required: "true"
    security/criticality: "medium"
spec:
  secretStoreRef:
    name: mita-${ENVIRONMENT}-secrets
    kind: SecretStore
  target:
    name: mita-notification-secrets
    creationPolicy: Owner
    deletionPolicy: Retain
    template:
      type: Opaque
      metadata:
        labels:
          app.kubernetes.io/name: mita
          app.kubernetes.io/component: notifications
        annotations:
          security/encrypted: "true"
          compliance/framework: "GDPR"
      data:
        SMTP_HOST: "smtp.sendgrid.net"
        SMTP_PORT: "587"
        SMTP_USERNAME: "{{ .smtp_username | toString }}"
        SMTP_PASSWORD: "{{ .smtp_password | toString }}"
        SMTP_FROM: "noreply@mita.finance"
        APPSTORE_SHARED_SECRET: "{{ .appstore_secret | toString }}"
  data:
    - secretKey: smtp_username
      remoteRef:
        key: mita-finance/${ENVIRONMENT}/notifications/smtp-credentials
        property: username
    - secretKey: smtp_password
      remoteRef:
        key: mita-finance/${ENVIRONMENT}/notifications/smtp-credentials
        property: password
    - secretKey: appstore_secret
      remoteRef:
        key: mita-finance/${ENVIRONMENT}/apple/app-store-secret
        property: value
  refreshInterval: 30m  # Medium priority secrets refreshed every 30 minutes

---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: mita-apple-push-secrets
  namespace: ${NAMESPACE}
  labels:
    app.kubernetes.io/name: mita
    app.kubernetes.io/component: push-notifications
    secret-category: medium
  annotations:
    compliance/framework: "GDPR"
    security/rotation-required: "false"  # Apple certificates have long expiry
    security/criticality: "medium"
spec:
  secretStoreRef:
    name: mita-${ENVIRONMENT}-secrets
    kind: SecretStore
  target:
    name: mita-apns-secrets
    creationPolicy: Owner
    deletionPolicy: Retain
    template:
      type: Opaque
      metadata:
        labels:
          app.kubernetes.io/name: mita
          app.kubernetes.io/component: push-notifications
        annotations:
          security/encrypted: "true"
          compliance/framework: "GDPR"
      data:
        APNS_KEY_ID: "{{ .apns_key_id | toString }}"
        APNS_TEAM_ID: "{{ .apns_team_id | toString }}"
        APNS_TOPIC: "com.mita.finance"
        APNS_USE_SANDBOX: "${APNS_SANDBOX}"
      dataFrom:
        - extract:
            key: mita-finance/${ENVIRONMENT}/apple/push-credentials
  data:
    - secretKey: apns_key_id
      remoteRef:
        key: mita-finance/${ENVIRONMENT}/apple/push-credentials
        property: key_id
    - secretKey: apns_team_id
      remoteRef:
        key: mita-finance/${ENVIRONMENT}/apple/push-credentials
        property: team_id
  refreshInterval: 60m

---
# Firebase service account (file-based secret)
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: mita-firebase-credentials
  namespace: ${NAMESPACE}
  labels:
    app.kubernetes.io/name: mita
    app.kubernetes.io/component: firebase
    secret-category: medium
  annotations:
    compliance/framework: "GDPR,DATA-PROTECTION"
    security/rotation-required: "true"
    security/criticality: "medium"
spec:
  secretStoreRef:
    name: mita-${ENVIRONMENT}-secrets
    kind: SecretStore
  target:
    name: mita-firebase-service-account
    creationPolicy: Owner
    deletionPolicy: Retain
    template:
      type: Opaque
      metadata:
        labels:
          app.kubernetes.io/name: mita
          app.kubernetes.io/component: firebase
        annotations:
          security/encrypted: "true"
          compliance/framework: "GDPR,DATA-PROTECTION"
      data:
        firebase-service-account.json: "{{ .firebase_service_account | toString }}"
        GOOGLE_APPLICATION_CREDENTIALS: "/app/secrets/firebase-service-account.json"
  data:
    - secretKey: firebase_service_account
      remoteRef:
        key: mita-finance/${ENVIRONMENT}/firebase/service-account
        property: json_content
  refreshInterval: 60m

---
# AWS backup credentials
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: mita-aws-backup-credentials
  namespace: ${NAMESPACE}
  labels:
    app.kubernetes.io/name: mita
    app.kubernetes.io/component: backup
    secret-category: high
  annotations:
    compliance/framework: "SOX"
    security/rotation-required: "true"
    security/criticality: "high"
spec:
  secretStoreRef:
    name: mita-${ENVIRONMENT}-secrets
    kind: SecretStore
  target:
    name: mita-aws-credentials
    creationPolicy: Owner
    deletionPolicy: Retain
    template:
      type: Opaque
      metadata:
        labels:
          app.kubernetes.io/name: mita
          app.kubernetes.io/component: backup
        annotations:
          security/encrypted: "true"
          compliance/framework: "SOX"
      data:
        AWS_ACCESS_KEY_ID: "{{ .aws_access_key_id | toString }}"
        AWS_SECRET_ACCESS_KEY: "{{ .aws_secret_access_key | toString }}"
        AWS_DEFAULT_REGION: "us-east-1"
        BACKUP_BUCKET: "mita-${ENVIRONMENT}-backups"
  data:
    - secretKey: aws_access_key_id
      remoteRef:
        key: mita-finance/${ENVIRONMENT}/aws/backup-credentials
        property: access_key_id
    - secretKey: aws_secret_access_key
      remoteRef:
        key: mita-finance/${ENVIRONMENT}/aws/backup-credentials
        property: secret_access_key
  refreshInterval: 15m

---
# Monitoring secrets
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: mita-monitoring-secrets
  namespace: ${NAMESPACE}
  labels:
    app.kubernetes.io/name: mita
    app.kubernetes.io/component: monitoring
    secret-category: low
  annotations:
    compliance/framework: "INTERNAL"
    security/rotation-required: "true"
    security/criticality: "low"
spec:
  secretStoreRef:
    name: mita-${ENVIRONMENT}-secrets
    kind: SecretStore
  target:
    name: mita-monitoring-secrets
    creationPolicy: Owner
    deletionPolicy: Retain
    template:
      type: Opaque
      metadata:
        labels:
          app.kubernetes.io/name: mita
          app.kubernetes.io/component: monitoring
        annotations:
          security/encrypted: "true"
          compliance/framework: "INTERNAL"
      data:
        GRAFANA_ADMIN_PASSWORD: "{{ .grafana_password | toString }}"
        PROMETHEUS_MULTIPROC_DIR: "/tmp/prometheus_multiproc"
  data:
    - secretKey: grafana_password
      remoteRef:
        key: mita-finance/${ENVIRONMENT}/monitoring/grafana-admin
        property: password
  refreshInterval: 60m

---
# Push notification secret for mobile apps
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret  
metadata:
  name: mita-apns-key-file
  namespace: ${NAMESPACE}
  labels:
    app.kubernetes.io/name: mita
    app.kubernetes.io/component: push-notifications
    secret-category: medium
  annotations:
    compliance/framework: "GDPR"
    security/rotation-required: "false"  # Apple P8 keys are long-lived
    security/criticality: "medium"
spec:
  secretStoreRef:
    name: mita-${ENVIRONMENT}-secrets
    kind: SecretStore
  target:
    name: mita-apns-key-file
    creationPolicy: Owner
    deletionPolicy: Retain
    template:
      type: Opaque
      metadata:
        labels:
          app.kubernetes.io/name: mita
          app.kubernetes.io/component: push-notifications
        annotations:
          security/encrypted: "true"
          compliance/framework: "GDPR"
      data:
        apns-key.p8: "{{ .apns_key_content | toString }}"
        APNS_KEY: "/app/secrets/apns-key.p8"
  data:
    - secretKey: apns_key_content
      remoteRef:
        key: mita-finance/${ENVIRONMENT}/apple/push-credentials
        property: p8_key_content
  refreshInterval: 60m