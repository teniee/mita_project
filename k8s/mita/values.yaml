# Production Configuration for MITA Finance
# Adjust these values for different environments (staging/production)

# Replica Configuration
replicaCount: 3
maxUnavailable: 0
maxSurge: 1

# Image Configuration
image:
  repository: ghcr.io/mita-finance/backend
  tag: latest
  pullPolicy: IfNotPresent
  pullSecrets: []

# Service Configuration
service:
  type: ClusterIP
  port: 80
  targetPort: 8000
  annotations: {}

# Resource Management (Financial-grade requirements)
resources:
  requests:
    cpu: 500m
    memory: 1Gi
    ephemeral-storage: 1Gi
  limits:
    cpu: 2000m
    memory: 2Gi
    ephemeral-storage: 2Gi

# Horizontal Pod Autoscaler
autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80
  
# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 2

# Ingress Configuration
ingress:
  enabled: true
  className: nginx
  host: mita.finance
  tls: 
    enabled: true
    secretName: mita-tls-cert
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"

# Database Configuration (External)
database:
  url: postgresql+asyncpg://USERNAME:PASSWORD@postgres-host:5432/mita?sslmode=require
  host: postgres-host
  port: 5432
  name: mita
  sslMode: require

# Redis Configuration (External)
redis:
  url: redis://:PASSWORD@redis-host:6379/0
  host: redis-host
  port: 6379
  database: 0

# Environment Variables
environment: production
debug: false
logLevel: INFO

# Security Configuration
security:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000
  seccompProfile:
    type: RuntimeDefault
  capabilities:
    drop:
      - ALL

# Network Policies
networkPolicy:
  enabled: true
  ingress:
    - from:
      - namespaceSelector:
          matchLabels:
            name: nginx-ingress
      ports:
      - protocol: TCP
        port: 8000
  egress:
    - to: []
      ports:
      - protocol: TCP
        port: 5432  # PostgreSQL
      - protocol: TCP
        port: 6379  # Redis
      - protocol: TCP
        port: 443   # HTTPS outbound
      - protocol: TCP
        port: 53    # DNS
      - protocol: UDP
        port: 53    # DNS

# Health Checks
healthChecks:
  enabled: true
  livenessProbe:
    httpGet:
      path: /health
      port: 8000
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 3
  readinessProbe:
    httpGet:
      path: /health
      port: 8000
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3

# Startup Probe
startupProbe:
  httpGet:
    path: /health
    port: 8000
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 30

# Monitoring
monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
    interval: 30s
    path: /metrics
  prometheusRule:
    enabled: true

# Logging
logging:
  level: INFO
  format: json
  structured: true

# Backup Configuration
backup:
  enabled: true
  bucket: s3://mita-production-backups
  region: us-east-1
  schedule: "0 2 * * *"  # Daily at 2 AM

# Node Affinity and Tolerations
nodeAffinity:
  enabled: false
  
tolerations: []

# Pod Affinity
podAffinity:
  enabled: true
  rule: soft  # soft or hard
  
# Pod Anti-Affinity (spread pods across nodes)
podAntiAffinity:
  enabled: true
  rule: soft  # soft or hard

# Task Queue Worker Configuration
worker:
  enabled: true
  replicaCount: 6
  queues: ["default"]
  maxJobs: 100
  jobTimeout: 600
  
  # Auto-scaling configuration
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
    targetQueueDepth: "5"
  
  # Resource allocation
  resources:
    limits:
      cpu: 1000m
      memory: 512Mi
      ephemeral-storage: 1Gi
    requests:
      cpu: 500m
      memory: 256Mi
      ephemeral-storage: 512Mi
  
  # Environment variables specific to workers
  env:
    ENABLE_WORKER_AUTOSCALING: "false"  # Handled by K8s HPA
    WORKER_HEARTBEAT_INTERVAL: "30"
    ENABLE_TASK_METRICS: "true"
    METRICS_COLLECTION_INTERVAL: "60"

# High Priority Workers (for critical tasks like OCR, AI analysis)
highPriorityWorker:
  enabled: true
  replicaCount: 2
  queues: ["critical", "high"]
  maxJobs: 50
  jobTimeout: 600
  
  resources:
    limits:
      cpu: 1500m
      memory: 1Gi
      ephemeral-storage: 1Gi
    requests:
      cpu: 750m
      memory: 512Mi
      ephemeral-storage: 512Mi
  
  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 60
    targetMemoryUtilizationPercentage: 70

# Low Priority Workers (for background tasks)
lowPriorityWorker:
  enabled: true
  replicaCount: 1
  queues: ["low"]
  maxJobs: 200
  jobTimeout: 1800  # 30 minutes for long-running tasks
  
  resources:
    limits:
      cpu: 500m
      memory: 256Mi
      ephemeral-storage: 512Mi
    requests:
      cpu: 250m
      memory: 128Mi
      ephemeral-storage: 256Mi

# Task Scheduler Configuration
scheduler:
  enabled: true
  replicaCount: 1
  
  resources:
    limits:
      cpu: 200m
      memory: 128Mi
      ephemeral-storage: 256Mi
    requests:
      cpu: 100m
      memory: 64Mi
      ephemeral-storage: 128Mi

# External Secrets Configuration
externalSecrets:
  # Enable External Secrets Operator integration
  enabled: true
  
  # Secret store configuration
  secretStoreName: "mita-production-secrets"
  secretStoreKind: "SecretStore"
  
  # AWS Secrets Manager configuration
  secretKeyPrefix: "mita-finance/production"
  
  # Refresh intervals based on secret criticality (financial compliance)
  refreshIntervals:
    critical: "5m"   # Critical secrets (DB, JWT) - every 5 minutes
    high: "15m"      # High priority secrets (API keys) - every 15 minutes
    medium: "30m"    # Medium priority secrets (SMTP, etc.) - every 30 minutes
    low: "60m"       # Low priority secrets (monitoring) - every hour
  
  # Backup secret store (disaster recovery)
  backupSecretStore:
    enabled: true
    name: "aws-secrets-manager-dr"
    region: "us-west-2"
  
  # Secret validation and monitoring
  validation:
    enabled: true
    webhookUrl: "https://webhook.mita.finance/secrets/validate"
  
  # Compliance settings
  compliance:
    auditEnabled: true
    retentionDays: 2555  # 7 years for financial compliance
    encryptionRequired: true

# Legacy secrets configuration (for migration period)
# WARNING: These will be deprecated once External Secrets is fully deployed
secrets:
  # Legacy secret values - only used when externalSecrets.enabled=false
  jwtSecret: ""
  jwtPreviousSecret: ""
  secretKey: ""
  openaiApiKey: ""
  sentryDsn: ""
  appStoreSharedSecret: ""
  smtpPassword: ""
  apnsKey: ""
  apnsKeyId: ""
  apnsTeamId: ""

# Task Queue Specific Monitoring
taskQueueMonitoring:
  enabled: true
  alerts:
    noWorkers: true
    highFailureRate: true
    queueBacklog: true
    slowTasks: true
    deadLetterQueue: true
  
  # SLA monitoring thresholds
  sla:
    ocrProcessingMaxSeconds: 300      # 5 minutes
    aiAnalysisMaxSeconds: 600         # 10 minutes
    notificationMaxSeconds: 60        # 1 minute
    budgetRedistributionMaxSeconds: 180  # 3 minutes

# Maintenance and Operational Tasks
maintenance:
  enabled: true
  
  # Subscription refresh configuration
  subscriptionRefresh:
    batchSize: 100
    timeout: 300
  
  # Log cleanup configuration
  logCleanup:
    retentionDays: 7  # Financial compliance requirement
  
  # Secret rotation configuration
  secretRotation:
    dryRun: false
    auditLog: true

# RBAC Configuration
rbac:
  create: true
  createClusterRole: false  # Set to true for cluster-wide monitoring

# AWS Integration Configuration
aws:
  serviceAccount:
    roleArn: ""  # EKS IRSA role for main application
  
  externalSecrets:
    roleArn: ""  # EKS IRSA role for External Secrets Operator
  
  backup:
    roleArn: ""  # EKS IRSA role for backup operations

# SMTP Configuration
smtp:
  host: "smtp.sendgrid.net"
  port: "587"
  from: "noreply@mita.finance"

# OpenAI Configuration
openai:
  model: "gpt-4o-mini"

# Security Configuration
security:
  allowedOrigins:
    - "https://mita.finance"
    - "https://app.mita.finance"
  apnsUseSandbox: false

# Ingress Enhanced Configuration  
ingress:
  monitoring:
    enabled: true
  networkPolicy:
    enabled: true

# Task Queue Redis Configuration (if using internal Redis)
taskQueueRedis:
  enabled: false  # Use external Redis by default
  architecture: standalone
  auth:
    enabled: true
    password: "task-queue-redis-password"
  
  master:
    persistence:
      enabled: true
      size: 5Gi
      storageClass: "fast-ssd"
    
    resources:
      limits:
        cpu: 1000m
        memory: 1Gi
      requests:
        cpu: 500m
        memory: 512Mi
