{{- if .Values.ingress.enabled }}
# Production-Ready Ingress with Enhanced Security and SSL Termination
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ include "mita.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "mita.labels" . | nindent 4 }}
    app.kubernetes.io/component: ingress
  annotations:
    # Ingress class and basic configuration
    kubernetes.io/ingress.class: {{ .Values.ingress.className | quote }}
    nginx.ingress.kubernetes.io/ingress.class: {{ .Values.ingress.className | quote }}
    
    # SSL/TLS Configuration
    {{- if .Values.ingress.tls.enabled }}
    cert-manager.io/cluster-issuer: {{ .Values.ingress.annotations."cert-manager.io/cluster-issuer" | default "letsencrypt-prod" | quote }}
    nginx.ingress.kubernetes.io/ssl-redirect: {{ .Values.ingress.annotations."nginx.ingress.kubernetes.io/ssl-redirect" | default "true" | quote }}
    nginx.ingress.kubernetes.io/force-ssl-redirect: {{ .Values.ingress.annotations."nginx.ingress.kubernetes.io/force-ssl-redirect" | default "true" | quote }}
    nginx.ingress.kubernetes.io/ssl-ciphers: "ECDHE-RSA-AES128-GCM-SHA256,ECDHE-RSA-AES256-GCM-SHA384,ECDHE-RSA-AES128-SHA256,ECDHE-RSA-AES256-SHA384"
    nginx.ingress.kubernetes.io/ssl-protocols: "TLSv1.2 TLSv1.3"
    nginx.ingress.kubernetes.io/ssl-prefer-server-ciphers: "true"
    {{- end }}
    
    # Security Headers - Critical for Financial Services
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-Frame-Options: DENY";
      more_set_headers "X-XSS-Protection: 1; mode=block";
      more_set_headers "Referrer-Policy: strict-origin-when-cross-origin";
      more_set_headers "Content-Security-Policy: default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; connect-src 'self' https://api.openai.com https://*.sentry.io; frame-ancestors 'none';";
      more_set_headers "Strict-Transport-Security: max-age=63072000; includeSubDomains; preload";
      more_set_headers "Permissions-Policy: geolocation=(), microphone=(), camera=()";
    
    # Rate Limiting - DDoS Protection
    nginx.ingress.kubernetes.io/rate-limit: {{ .Values.ingress.annotations."nginx.ingress.kubernetes.io/rate-limit" | default "100" | quote }}
    nginx.ingress.kubernetes.io/rate-limit-window: {{ .Values.ingress.annotations."nginx.ingress.kubernetes.io/rate-limit-window" | default "1m" | quote }}
    nginx.ingress.kubernetes.io/rate-limit-connections: "10"
    
    # Request Size and Timeout Configuration
    nginx.ingress.kubernetes.io/proxy-body-size: {{ .Values.ingress.annotations."nginx.ingress.kubernetes.io/proxy-body-size" | default "10m" | quote }}
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    
    # Buffer Configuration for Performance
    nginx.ingress.kubernetes.io/proxy-buffering: "on"
    nginx.ingress.kubernetes.io/proxy-buffer-size: "8k"
    nginx.ingress.kubernetes.io/proxy-buffers-number: "8"
    
    # Upstream Configuration
    nginx.ingress.kubernetes.io/upstream-keepalive-connections: "32"
    nginx.ingress.kubernetes.io/upstream-keepalive-requests: "100"
    nginx.ingress.kubernetes.io/upstream-keepalive-timeout: "60"
    
    # Health Check Configuration
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    nginx.ingress.kubernetes.io/proxy-next-upstream: "error timeout invalid_header http_502 http_503"
    nginx.ingress.kubernetes.io/proxy-next-upstream-tries: "3"
    
    # Custom annotations from values.yaml
    {{- range $key, $value := .Values.ingress.annotations }}
    {{ $key }}: {{ $value | quote }}
    {{- end }}
    
    # Compliance and auditing
    compliance/framework: "SOX,PCI-DSS,GDPR"
    security/tls-version: "TLS1.2+"
    monitoring/access-logs: "enabled"
spec:
  # Ingress class name
  {{- if .Values.ingress.className }}
  ingressClassName: {{ .Values.ingress.className }}
  {{- end }}
  
  # TLS Configuration
  {{- if .Values.ingress.tls.enabled }}
  tls:
    - hosts:
        - {{ .Values.ingress.host }}
      secretName: {{ .Values.ingress.tls.secretName | default (printf "%s-tls" (include "mita.fullname" .)) }}
  {{- end }}
  
  # Routing Rules
  rules:
    - host: {{ .Values.ingress.host }}
      http:
        paths:
          # Health Check Endpoints - No Authentication Required
          - path: /health
            pathType: Prefix
            backend:
              service:
                name: {{ include "mita.fullname" . }}
                port:
                  number: {{ .Values.service.port }}
          
          # Metrics Endpoint - Internal Only
          - path: /metrics
            pathType: Exact
            backend:
              service:
                name: {{ include "mita.fullname" . }}
                port:
                  number: {{ .Values.service.port }}
          
          # API Endpoints - Authentication Required
          - path: /api/v1
            pathType: Prefix
            backend:
              service:
                name: {{ include "mita.fullname" . }}
                port:
                  number: {{ .Values.service.port }}
          
          # Authentication Endpoints
          - path: /auth
            pathType: Prefix
            backend:
              service:
                name: {{ include "mita.fullname" . }}
                port:
                  number: {{ .Values.service.port }}
          
          # Static Files and Assets
          - path: /static
            pathType: Prefix
            backend:
              service:
                name: {{ include "mita.fullname" . }}
                port:
                  number: {{ .Values.service.port }}
          
          # Documentation (if enabled)
          - path: /docs
            pathType: Prefix
            backend:
              service:
                name: {{ include "mita.fullname" . }}
                port:
                  number: {{ .Values.service.port }}
          
          # OpenAPI Schema
          - path: /openapi.json
            pathType: Exact
            backend:
              service:
                name: {{ include "mita.fullname" . }}
                port:
                  number: {{ .Values.service.port }}
          
          # Root Path - Default Catch-all
          - path: /
            pathType: Prefix
            backend:
              service:
                name: {{ include "mita.fullname" . }}
                port:
                  number: {{ .Values.service.port }}

---
{{- if .Values.ingress.monitoring.enabled | default true }}
# Ingress Monitoring Service
apiVersion: v1
kind: Service
metadata:
  name: {{ include "mita.fullname" . }}-ingress-nginx-metrics
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "mita.labels" . | nindent 4 }}
    app.kubernetes.io/component: ingress-metrics
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "10254"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
    - name: http-metrics
      port: 10254
      targetPort: 10254
      protocol: TCP
  selector:
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/component: controller
{{- end }}

---
{{- if .Values.ingress.networkPolicy.enabled | default true }}
# Network Policy for Ingress Security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: {{ include "mita.fullname" . }}-ingress-netpol
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "mita.labels" . | nindent 4 }}
    app.kubernetes.io/component: ingress-netpol
spec:
  podSelector:
    matchLabels:
      {{- include "mita.selectorLabels" . | nindent 6 }}
  policyTypes:
    - Ingress
  ingress:
    # Allow traffic from nginx ingress controller
    - from:
        - namespaceSelector:
            matchLabels:
              name: ingress-nginx
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: ingress-nginx
              app.kubernetes.io/component: controller
      ports:
        - protocol: TCP
          port: {{ .Values.service.targetPort }}
    # Allow internal health checks
    - from:
        - namespaceSelector:
            matchLabels:
              name: kube-system
      ports:
        - protocol: TCP
          port: {{ .Values.service.targetPort }}
{{- end }}
{{- end }}