apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "mita.fullname" . }}-worker
  labels:
    {{- include "mita.labels" . | nindent 4 }}
    component: worker
spec:
  {{- if not .Values.worker.autoscaling.enabled }}
  replicas: {{ .Values.worker.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "mita.selectorLabels" . | nindent 6 }}
      component: worker
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
      labels:
        {{- include "mita.selectorLabels" . | nindent 8 }}
        component: worker
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
        - name: worker
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - python
            - -m
            - app.worker
          env:
            - name: PYTHONPATH
              value: "/app"
            - name: ENVIRONMENT
              value: "production"
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: {{ include "mita.fullname" . }}-secrets
                  key: database-url
            - name: REDIS_URL
              valueFrom:
                secretKeyRef:
                  name: {{ include "mita.fullname" . }}-secrets
                  key: redis-url
            - name: WORKER_ID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: WORKER_QUEUES
              value: {{ .Values.worker.queues | join "," }}
            - name: WORKER_MAX_JOBS
              value: "{{ .Values.worker.maxJobs }}"
            - name: WORKER_JOB_TIMEOUT
              value: "{{ .Values.worker.jobTimeout }}"
            - name: ENABLE_WORKER_AUTOSCALING
              value: "false"  # Handled by K8s HPA
            {{- range $key, $value := .Values.worker.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
          resources:
            {{- toYaml .Values.worker.resources | nindent 12 }}
          ports:
            - name: metrics
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health/tasks/liveness
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health/tasks/readiness
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 15
            timeoutSeconds: 5
            failureThreshold: 3
          volumeMounts:
            - name: secrets
              mountPath: /app/secrets
              readOnly: true
            - name: logs
              mountPath: /app/logs
      volumes:
        - name: secrets
          secret:
            secretName: {{ include "mita.fullname" . }}-secrets
        - name: logs
          emptyDir: {}
      {{- with .Values.worker.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.worker.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.worker.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
---
{{- if .Values.worker.autoscaling.enabled }}
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: {{ include "mita.fullname" . }}-worker-hpa
  labels:
    {{- include "mita.labels" . | nindent 4 }}
    component: worker
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: {{ include "mita.fullname" . }}-worker
  minReplicas: {{ .Values.worker.autoscaling.minReplicas }}
  maxReplicas: {{ .Values.worker.autoscaling.maxReplicas }}
  metrics:
    {{- if .Values.worker.autoscaling.targetCPUUtilizationPercentage }}
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: {{ .Values.worker.autoscaling.targetCPUUtilizationPercentage }}
    {{- end }}
    {{- if .Values.worker.autoscaling.targetMemoryUtilizationPercentage }}
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: {{ .Values.worker.autoscaling.targetMemoryUtilizationPercentage }}
    {{- end }}
    # Custom metrics for queue depth scaling
    - type: Pods
      pods:
        metric:
          name: rq_queue_depth
        target:
          type: AverageValue
          averageValue: "{{ .Values.worker.autoscaling.targetQueueDepth }}"
{{- end }}