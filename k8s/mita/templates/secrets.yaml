# MITA Finance External Secrets Configuration
# Replaces hardcoded secrets with External Secrets Operator integration

{{- if .Values.externalSecrets.enabled }}
# Database credentials from AWS Secrets Manager
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: {{ include "mita.fullname" . }}-database-credentials
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "mita.labels" . | nindent 4 }}
    app.kubernetes.io/component: database-secrets
    secret-category: critical
  annotations:
    compliance/framework: "SOX,PCI-DSS"
    security/rotation-required: "true"
    security/criticality: "critical"
spec:
  secretStoreRef:
    name: {{ .Values.externalSecrets.secretStoreName }}
    kind: {{ .Values.externalSecrets.secretStoreKind }}
  target:
    name: {{ include "mita.fullname" . }}-database-credentials
    creationPolicy: Owner
    deletionPolicy: Retain
    template:
      type: Opaque
      metadata:
        labels:
          {{- include "mita.labels" . | nindent 10 }}
          app.kubernetes.io/component: database-secrets
        annotations:
          security/encrypted: "true"
          compliance/framework: "SOX,PCI-DSS"
      data:
        DATABASE_URL: "{{ `{{ .database_url }}` }}"
        POSTGRES_HOST: "{{ `{{ .database_host }}` }}"
        POSTGRES_USER: "{{ `{{ .database_user }}` }}"
        POSTGRES_PASSWORD: "{{ `{{ .database_password }}` }}"
        POSTGRES_DB: "{{ `{{ .database_name }}` }}"
        POSTGRES_PORT: "{{ `{{ .database_port }}` }}"
  data:
    - secretKey: database_url
      remoteRef:
        key: {{ .Values.externalSecrets.secretKeyPrefix }}/database/primary
        property: connection_string
    - secretKey: database_host
      remoteRef:
        key: {{ .Values.externalSecrets.secretKeyPrefix }}/database/primary
        property: host
    - secretKey: database_user
      remoteRef:
        key: {{ .Values.externalSecrets.secretKeyPrefix }}/database/primary
        property: username
    - secretKey: database_password
      remoteRef:
        key: {{ .Values.externalSecrets.secretKeyPrefix }}/database/primary
        property: password
    - secretKey: database_name
      remoteRef:
        key: {{ .Values.externalSecrets.secretKeyPrefix }}/database/primary
        property: database
    - secretKey: database_port
      remoteRef:
        key: {{ .Values.externalSecrets.secretKeyPrefix }}/database/primary
        property: port
  refreshInterval: {{ .Values.externalSecrets.refreshIntervals.critical }}

---
# Authentication secrets from AWS Secrets Manager
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: {{ include "mita.fullname" . }}-auth-secrets
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "mita.labels" . | nindent 4 }}
    app.kubernetes.io/component: auth-secrets
    secret-category: critical
  annotations:
    compliance/framework: "SOX,PCI-DSS"
    security/rotation-required: "true"
    security/criticality: "critical"
spec:
  secretStoreRef:
    name: {{ .Values.externalSecrets.secretStoreName }}
    kind: {{ .Values.externalSecrets.secretStoreKind }}
  target:
    name: {{ include "mita.fullname" . }}-auth-secrets
    creationPolicy: Owner
    deletionPolicy: Retain
    template:
      type: Opaque
      metadata:
        labels:
          {{- include "mita.labels" . | nindent 10 }}
          app.kubernetes.io/component: auth-secrets
        annotations:
          security/encrypted: "true"
          compliance/framework: "SOX,PCI-DSS"
      data:
        JWT_SECRET: "{{ `{{ .jwt_secret }}` }}"
        JWT_PREVIOUS_SECRET: "{{ `{{ .jwt_previous_secret }}` }}"
        SECRET_KEY: "{{ `{{ .app_secret_key }}` }}"
        ALGORITHM: "HS256"
  data:
    - secretKey: jwt_secret
      remoteRef:
        key: {{ .Values.externalSecrets.secretKeyPrefix }}/auth/jwt-secret
        property: value
    - secretKey: jwt_previous_secret
      remoteRef:
        key: {{ .Values.externalSecrets.secretKeyPrefix }}/auth/jwt-previous-secret
        property: value
    - secretKey: app_secret_key
      remoteRef:
        key: {{ .Values.externalSecrets.secretKeyPrefix }}/app/secret-key
        property: value
  refreshInterval: {{ .Values.externalSecrets.refreshIntervals.critical }}

---
# Redis credentials from AWS Secrets Manager
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: {{ include "mita.fullname" . }}-redis-credentials
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "mita.labels" . | nindent 4 }}
    app.kubernetes.io/component: redis-secrets
    secret-category: high
  annotations:
    compliance/framework: "PCI-DSS"
    security/rotation-required: "true"
    security/criticality: "high"
spec:
  secretStoreRef:
    name: {{ .Values.externalSecrets.secretStoreName }}
    kind: {{ .Values.externalSecrets.secretStoreKind }}
  target:
    name: {{ include "mita.fullname" . }}-redis-credentials
    creationPolicy: Owner
    deletionPolicy: Retain
    template:
      type: Opaque
      metadata:
        labels:
          {{- include "mita.labels" . | nindent 10 }}
          app.kubernetes.io/component: redis-secrets
        annotations:
          security/encrypted: "true"
          compliance/framework: "PCI-DSS"
      data:
        REDIS_URL: "{{ `{{ .redis_url }}` }}"
        REDIS_PASSWORD: "{{ `{{ .redis_password }}` }}"
        REDIS_HOST: "{{ `{{ .redis_host }}` }}"
        REDIS_PORT: "{{ `{{ .redis_port }}` }}"
  data:
    - secretKey: redis_url
      remoteRef:
        key: {{ .Values.externalSecrets.secretKeyPrefix }}/cache/redis-auth
        property: connection_string
    - secretKey: redis_password
      remoteRef:
        key: {{ .Values.externalSecrets.secretKeyPrefix }}/cache/redis-auth
        property: password
    - secretKey: redis_host
      remoteRef:
        key: {{ .Values.externalSecrets.secretKeyPrefix }}/cache/redis-auth
        property: host
    - secretKey: redis_port
      remoteRef:
        key: {{ .Values.externalSecrets.secretKeyPrefix }}/cache/redis-auth
        property: port
  refreshInterval: {{ .Values.externalSecrets.refreshIntervals.high }}

---
# External API secrets from AWS Secrets Manager
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: {{ include "mita.fullname" . }}-external-api-secrets
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "mita.labels" . | nindent 4 }}
    app.kubernetes.io/component: external-api-secrets
    secret-category: high
  annotations:
    compliance/framework: "DATA-PROTECTION"
    security/rotation-required: "true"
    security/criticality: "high"
spec:
  secretStoreRef:
    name: {{ .Values.externalSecrets.secretStoreName }}
    kind: {{ .Values.externalSecrets.secretStoreKind }}
  target:
    name: {{ include "mita.fullname" . }}-external-api-secrets
    creationPolicy: Owner
    deletionPolicy: Retain
    template:
      type: Opaque
      metadata:
        labels:
          {{- include "mita.labels" . | nindent 10 }}
          app.kubernetes.io/component: external-api-secrets
        annotations:
          security/encrypted: "true"
          compliance/framework: "DATA-PROTECTION"
      data:
        OPENAI_API_KEY: "{{ `{{ .openai_api_key }}` }}"
        OPENAI_MODEL: "{{ .Values.openai.model | default "gpt-4o-mini" }}"
        SENTRY_DSN: "{{ `{{ .sentry_dsn }}` }}"
  data:
    - secretKey: openai_api_key
      remoteRef:
        key: {{ .Values.externalSecrets.secretKeyPrefix }}/external/openai-api-key
        property: value
    - secretKey: sentry_dsn
      remoteRef:
        key: {{ .Values.externalSecrets.secretKeyPrefix }}/monitoring/sentry-dsn
        property: value
  refreshInterval: {{ .Values.externalSecrets.refreshIntervals.high }}

---
# Notification service secrets from AWS Secrets Manager
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: {{ include "mita.fullname" . }}-notification-secrets
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "mita.labels" . | nindent 4 }}
    app.kubernetes.io/component: notification-secrets
    secret-category: medium
  annotations:
    compliance/framework: "GDPR"
    security/rotation-required: "true"
    security/criticality: "medium"
spec:
  secretStoreRef:
    name: {{ .Values.externalSecrets.secretStoreName }}
    kind: {{ .Values.externalSecrets.secretStoreKind }}
  target:
    name: {{ include "mita.fullname" . }}-notification-secrets
    creationPolicy: Owner
    deletionPolicy: Retain
    template:
      type: Opaque
      metadata:
        labels:
          {{- include "mita.labels" . | nindent 10 }}
          app.kubernetes.io/component: notification-secrets
        annotations:
          security/encrypted: "true"
          compliance/framework: "GDPR"
      data:
        SMTP_HOST: "{{ .Values.smtp.host | default "smtp.sendgrid.net" }}"
        SMTP_PORT: "{{ .Values.smtp.port | default "587" }}"
        SMTP_USERNAME: "{{ `{{ .smtp_username }}` }}"
        SMTP_PASSWORD: "{{ `{{ .smtp_password }}` }}"
        SMTP_FROM: "{{ .Values.smtp.from | default "noreply@mita.finance" }}"
        APPSTORE_SHARED_SECRET: "{{ `{{ .appstore_secret }}` }}"
  data:
    - secretKey: smtp_username
      remoteRef:
        key: {{ .Values.externalSecrets.secretKeyPrefix }}/notifications/smtp-credentials
        property: username
    - secretKey: smtp_password
      remoteRef:
        key: {{ .Values.externalSecrets.secretKeyPrefix }}/notifications/smtp-credentials
        property: password
    - secretKey: appstore_secret
      remoteRef:
        key: {{ .Values.externalSecrets.secretKeyPrefix }}/apple/app-store-secret
        property: value
  refreshInterval: {{ .Values.externalSecrets.refreshIntervals.medium }}

{{- else }}
# Fallback to legacy secret management (for migration period only)
# WARNING: This should only be used during migration to External Secrets
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "mita.fullname" . }}-secrets-legacy
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "mita.labels" . | nindent 4 }}
    app.kubernetes.io/component: secrets-legacy
  annotations:
    security/warning: "Legacy secret management - migrate to External Secrets"
    compliance/status: "migration-pending"
type: Opaque
data:
  # Database connection string (base64 encoded)
  database-url: {{ .Values.database.url | b64enc | quote }}
  
  # Redis connection string (base64 encoded)  
  redis-url: {{ .Values.redis.url | b64enc | quote }}
  
  # JWT Secrets (base64 encoded)
  jwt-secret: {{ required "JWT secret is required" .Values.secrets.jwtSecret | b64enc | quote }}
  jwt-previous-secret: {{ .Values.secrets.jwtPreviousSecret | default "" | b64enc | quote }}
  
  # Application secret key (base64 encoded)
  secret-key: {{ required "Secret key is required" .Values.secrets.secretKey | b64enc | quote }}
  
  # External service API keys (base64 encoded)
  openai-api-key: {{ required "OpenAI API key is required" .Values.secrets.openaiApiKey | b64enc | quote }}
  
  # Optional secrets
  {{- if .Values.secrets.sentryDsn }}
  sentry-dsn: {{ .Values.secrets.sentryDsn | b64enc | quote }}
  {{- end }}
  
  {{- if .Values.secrets.appStoreSharedSecret }}
  appstore-shared-secret: {{ .Values.secrets.appStoreSharedSecret | b64enc | quote }}
  {{- end }}
  
  {{- if .Values.secrets.smtpPassword }}
  smtp-password: {{ .Values.secrets.smtpPassword | b64enc | quote }}
  {{- end }}
  
  {{- if .Values.secrets.apnsKey }}
  apns-key: {{ .Values.secrets.apnsKey | b64enc | quote }}
  {{- end }}
  
  {{- if .Values.secrets.apnsKeyId }}
  apns-key-id: {{ .Values.secrets.apnsKeyId | b64enc | quote }}
  {{- end }}
  
  {{- if .Values.secrets.apnsTeamId }}
  apns-team-id: {{ .Values.secrets.apnsTeamId | b64enc | quote }}
  {{- end }}
{{- end }}

---
{{- if .Values.monitoring.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "mita.fullname" . }}-config
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "mita.labels" . | nindent 4 }}
    app.kubernetes.io/component: config
data:
  # Application configuration
  ENVIRONMENT: {{ .Values.environment | quote }}
  DEBUG: {{ .Values.debug | quote }}
  LOG_LEVEL: {{ .Values.logLevel | quote }}
  
  # Monitoring configuration
  PROMETHEUS_MULTIPROC_DIR: "/tmp/prometheus_multiproc"
  
  # Logging configuration
  LOG_FORMAT: {{ .Values.logging.format | quote }}
  
  # CORS configuration
  ALLOWED_ORIGINS: {{ join "," .Values.security.allowedOrigins | quote }}
  
  # App Store configuration
  APNS_TOPIC: "com.mita.finance"
  APNS_USE_SANDBOX: {{ .Values.security.apnsUseSandbox | quote }}
  
  # SMTP configuration
  SMTP_HOST: {{ .Values.smtp.host | default "smtp.sendgrid.net" | quote }}
  SMTP_PORT: {{ .Values.smtp.port | default "587" | quote }}
  SMTP_FROM: {{ .Values.smtp.from | default "noreply@mita.finance" | quote }}
{{- end }}