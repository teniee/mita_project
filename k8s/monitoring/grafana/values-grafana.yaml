# Production-grade Grafana configuration for MITA Financial Services
# High availability setup with financial compliance dashboards

# Global configuration
global:
  imageRegistry: ""
  storageClass: "fast-ssd"

# Grafana deployment configuration
replicas: 2

# Image configuration
image:
  repository: grafana/grafana
  tag: "10.2.2"
  pullPolicy: IfNotPresent

# Service account configuration
serviceAccount:
  create: true
  name: grafana
  annotations:
    eks.amazonaws.com/role-arn: "arn:aws:iam::ACCOUNT_ID:role/grafana-monitoring-role"

# RBAC configuration
rbac:
  create: true
  pspEnabled: false
  namespaced: false

# Security context
securityContext:
  runAsNonRoot: true
  runAsUser: 472
  runAsGroup: 0
  fsGroup: 472
  seccompProfile:
    type: RuntimeDefault

# Pod security context
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 472
  fsGroup: 472

# Container security context
containerSecurityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: true

# Resource allocation for financial monitoring workload
resources:
  requests:
    cpu: 500m
    memory: 1Gi
    ephemeral-storage: 1Gi
  limits:
    cpu: 2000m
    memory: 4Gi
    ephemeral-storage: 2Gi

# Persistence configuration for dashboards and data
persistence:
  enabled: true
  type: pvc
  storageClassName: "fast-ssd"
  accessModes:
    - ReadWriteOnce
  size: 50Gi
  annotations:
    volume.kubernetes.io/storage-class: "fast-ssd"

# Service configuration
service:
  enabled: true
  type: ClusterIP
  port: 3000
  targetPort: 3000
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "3000"
    prometheus.io/path: "/metrics"

# Ingress configuration for external access
ingress:
  enabled: true
  ingressClassName: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: grafana-basic-auth
    nginx.ingress.kubernetes.io/auth-realm: "MITA Financial Services - Restricted Access"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - grafana.mita.finance
  tls:
    - secretName: grafana-tls-cert
      hosts:
        - grafana.mita.finance

# Environment variables
env:
  GF_SECURITY_ADMIN_USER: admin
  GF_SECURITY_ADMIN_PASSWORD__FILE: /etc/secrets/admin-password
  GF_USERS_ALLOW_SIGN_UP: false
  GF_USERS_ALLOW_ORG_CREATE: false
  GF_USERS_AUTO_ASSIGN_ORG: true
  GF_USERS_AUTO_ASSIGN_ORG_ROLE: Viewer
  GF_AUTH_DISABLE_LOGIN_FORM: false
  GF_AUTH_ANONYMOUS_ENABLED: false
  GF_SECURITY_DISABLE_GRAVATAR: true
  GF_ANALYTICS_REPORTING_ENABLED: false
  GF_ANALYTICS_CHECK_FOR_UPDATES: false
  GF_SECURITY_COOKIE_SECURE: true
  GF_SECURITY_COOKIE_SAMESITE: strict
  GF_SECURITY_STRICT_TRANSPORT_SECURITY: true
  GF_SECURITY_X_CONTENT_TYPE_OPTIONS: true
  GF_SECURITY_X_XSS_PROTECTION: true
  GF_LOG_LEVEL: warn
  GF_LOG_MODE: console

# Extra environment variables from secrets
envFromSecret: grafana-secrets

# Grafana configuration file
grafana.ini:
  server:
    domain: grafana.mita.finance
    root_url: "https://grafana.mita.finance"
    serve_from_sub_path: false
    enable_gzip: true
    
  security:
    admin_user: admin
    admin_password: $__file{/etc/secrets/admin-password}
    secret_key: $__file{/etc/secrets/secret-key}
    disable_gravatar: true
    cookie_secure: true
    cookie_samesite: strict
    strict_transport_security: true
    x_content_type_options: true
    x_xss_protection: true
    
  users:
    allow_sign_up: false
    allow_org_create: false
    auto_assign_org: true
    auto_assign_org_role: Viewer
    default_theme: dark
    
  auth:
    disable_login_form: false
    
  auth.anonymous:
    enabled: false
    
  analytics:
    reporting_enabled: false
    check_for_updates: false
    
  log:
    mode: console
    level: warn
    
  database:
    type: postgres
    host: postgres-grafana:5432
    name: grafana
    user: grafana
    password: $__file{/etc/secrets/db-password}
    ssl_mode: require
    
  session:
    provider: redis
    provider_config: addr=redis-grafana:6379,pool_size=100,db=grafana
    cookie_secure: true
    cookie_samesite: strict
    
  alerting:
    enabled: true
    execute_alerts: true
    error_or_timeout: alerting
    nodata_or_nullvalues: no_data
    concurrent_render_limit: 5
    
  unified_alerting:
    enabled: true
    
  smtp:
    enabled: true
    host: smtp.sendgrid.net:587
    user: apikey
    password: $__file{/etc/secrets/smtp-password}
    from_address: grafana@mita.finance
    from_name: "MITA Financial Monitoring"
    skip_verify: false
    
  metrics:
    enabled: true
    interval_seconds: 10

# Datasources configuration
datasources:
  datasources.yaml:
    apiVersion: 1
    datasources:
      # Primary Prometheus datasource
      - name: Prometheus
        type: prometheus
        url: http://prometheus-operated:9090
        access: proxy
        isDefault: true
        basicAuth: false
        jsonData:
          timeInterval: "30s"
          queryTimeout: "60s"
          httpMethod: "POST"
          manageAlerts: true
          alertmanagerUid: "alertmanager"
        
      # AlertManager datasource
      - name: AlertManager
        type: alertmanager
        url: http://alertmanager-operated:9093
        access: proxy
        uid: alertmanager
        jsonData:
          implementation: "prometheus"

# Dashboard providers configuration
dashboardProviders:
  dashboardproviders.yaml:
    apiVersion: 1
    providers:
      # Financial Services dashboards
      - name: 'financial-services'
        orgId: 1
        folder: 'Financial Services'
        type: file
        disableDeletion: false
        updateIntervalSeconds: 30
        allowUiUpdates: true
        options:
          path: /var/lib/grafana/dashboards/financial-services
          
      # Infrastructure dashboards
      - name: 'infrastructure'
        orgId: 1
        folder: 'Infrastructure'
        type: file
        disableDeletion: false
        updateIntervalSeconds: 30
        allowUiUpdates: true
        options:
          path: /var/lib/grafana/dashboards/infrastructure
          
      # Security and compliance dashboards
      - name: 'security-compliance'
        orgId: 1
        folder: 'Security & Compliance'
        type: file
        disableDeletion: false
        updateIntervalSeconds: 30
        allowUiUpdates: true
        options:
          path: /var/lib/grafana/dashboards/security-compliance
          
      # Business metrics dashboards
      - name: 'business-metrics'
        orgId: 1
        folder: 'Business Metrics'
        type: file
        disableDeletion: false
        updateIntervalSeconds: 30
        allowUiUpdates: true
        options:
          path: /var/lib/grafana/dashboards/business-metrics

# Dashboard configurations will be loaded from ConfigMaps
dashboards:
  financial-services: {}
  infrastructure: {}
  security-compliance: {}
  business-metrics: {}

# Persistent volumes for dashboard storage
extraVolumes:
  - name: dashboards-financial-services
    configMap:
      name: grafana-dashboards-financial-services
  - name: dashboards-infrastructure
    configMap:
      name: grafana-dashboards-infrastructure
  - name: dashboards-security-compliance
    configMap:
      name: grafana-dashboards-security-compliance
  - name: dashboards-business-metrics
    configMap:
      name: grafana-dashboards-business-metrics
  - name: grafana-secrets
    secret:
      secretName: grafana-secrets
      defaultMode: 0400

# Volume mounts for dashboard files and secrets
extraVolumeMounts:
  - name: dashboards-financial-services
    mountPath: /var/lib/grafana/dashboards/financial-services
    readOnly: true
  - name: dashboards-infrastructure
    mountPath: /var/lib/grafana/dashboards/infrastructure
    readOnly: true
  - name: dashboards-security-compliance
    mountPath: /var/lib/grafana/dashboards/security-compliance
    readOnly: true
  - name: dashboards-business-metrics
    mountPath: /var/lib/grafana/dashboards/business-metrics
    readOnly: true
  - name: grafana-secrets
    mountPath: /etc/secrets
    readOnly: true

# Liveness probe
livenessProbe:
  httpGet:
    path: /api/health
    port: 3000
  initialDelaySeconds: 60
  timeoutSeconds: 30
  failureThreshold: 3
  periodSeconds: 10

# Readiness probe
readinessProbe:
  httpGet:
    path: /api/health
    port: 3000
  initialDelaySeconds: 30
  timeoutSeconds: 30
  periodSeconds: 5

# Pod disruption budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# Node affinity and anti-affinity
affinity:
  nodeAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      nodeSelectorTerms:
        - matchExpressions:
          - key: node.kubernetes.io/instance-type
            operator: NotIn
            values: ["t3.nano", "t3.micro", "t3.small"]
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values: ["grafana"]
          topologyKey: kubernetes.io/hostname

# Tolerations for dedicated monitoring nodes
tolerations:
  - key: "monitoring"
    operator: "Equal"
    value: "true"
    effect: "NoSchedule"

# Service monitor for Grafana metrics
serviceMonitor:
  enabled: true
  namespace: monitoring
  labels:
    monitoring.coreos.com/prometheus: "production"
  interval: 30s
  path: /metrics
  scrapeTimeout: 30s

# Network policy
networkPolicy:
  enabled: true
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: ingress-nginx
      ports:
        - port: 3000
          protocol: TCP
    - from:
        - namespaceSelector:
            matchLabels:
              name: monitoring
      ports:
        - port: 3000
          protocol: TCP
  egress:
    - to: []
      ports:
        - port: 53
          protocol: UDP
        - port: 53
          protocol: TCP
        - port: 443
          protocol: TCP
        - port: 587
          protocol: TCP
    - to:
        - namespaceSelector:
            matchLabels:
              name: monitoring
      ports:
        - port: 9090
          protocol: TCP
        - port: 9093
          protocol: TCP

# Backup configuration
backup:
  enabled: true
  schedule: "0 3 * * *"  # Daily at 3 AM
  destination: "s3://mita-production-backups/grafana"
  retention: "30d"