# PostgreSQL Exporter for monitoring database performance and health
# Production-grade monitoring for MITA Financial Services PostgreSQL instances

apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-exporter
  namespace: monitoring
  labels:
    app.kubernetes.io/name: postgres-exporter
    app.kubernetes.io/component: monitoring
    environment: production
    service: postgresql-monitoring
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: postgres-exporter
  template:
    metadata:
      labels:
        app.kubernetes.io/name: postgres-exporter
        app.kubernetes.io/component: monitoring
        environment: production
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9187"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        fsGroup: 65534
      containers:
        - name: postgres-exporter
          image: prometheuscommunity/postgres-exporter:v0.14.0
          ports:
            - name: http-metrics
              containerPort: 9187
              protocol: TCP
          env:
            # Database connection configuration
            - name: DATA_SOURCE_NAME
              valueFrom:
                secretKeyRef:
                  name: postgres-exporter-secret
                  key: data_source_name
            - name: PG_EXPORTER_EXCLUDE_DATABASES
              value: "template0,template1"
            - name: PG_EXPORTER_INCLUDE_DATABASES
              value: "mita"
            - name: PG_EXPORTER_CONSTANT_LABELS
              value: "environment=production,service=postgresql,business_function=financial_data"
            - name: PG_EXPORTER_DISABLE_DEFAULT_METRICS
              value: "false"
            - name: PG_EXPORTER_DISABLE_SETTINGS_METRICS
              value: "false"
            - name: PG_EXPORTER_AUTO_DISCOVER_DATABASES
              value: "false"
            - name: PG_EXPORTER_WEB_LISTEN_ADDRESS
              value: ":9187"
            - name: PG_EXPORTER_WEB_TELEMETRY_PATH
              value: "/metrics"
            - name: PG_EXPORTER_LOG_LEVEL
              value: "info"
          
          args:
            - "--log.level=info"
            - "--web.listen-address=:9187"
            - "--web.telemetry-path=/metrics"
            - "--extend.query-path=/etc/postgres_exporter/queries.yaml"
          
          volumeMounts:
            - name: postgres-exporter-config
              mountPath: /etc/postgres_exporter
              readOnly: true
          
          resources:
            requests:
              cpu: 200m
              memory: 256Mi
            limits:
              cpu: 500m
              memory: 512Mi
          
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
          
          livenessProbe:
            httpGet:
              path: /
              port: 9187
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 3
          
          readinessProbe:
            httpGet:
              path: /
              port: 9187
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
      
      volumes:
        - name: postgres-exporter-config
          configMap:
            name: postgres-exporter-config
            defaultMode: 0444
      
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/name
                      operator: In
                      values: ["postgres-exporter"]
                topologyKey: kubernetes.io/hostname
      
      tolerations:
        - key: "monitoring"
          operator: "Equal"
          value: "true"
          effect: "NoSchedule"

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-exporter
  namespace: monitoring
  labels:
    app.kubernetes.io/name: postgres-exporter
    app.kubernetes.io/component: monitoring
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9187"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
    - name: http-metrics
      port: 9187
      targetPort: 9187
      protocol: TCP
  selector:
    app.kubernetes.io/name: postgres-exporter

---
# Custom PostgreSQL monitoring queries for financial services
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-exporter-config
  namespace: monitoring
  labels:
    app.kubernetes.io/name: postgres-exporter
    app.kubernetes.io/component: config
data:
  queries.yaml: |
    # Financial Services Specific PostgreSQL Monitoring Queries
    
    # Table sizes and growth for financial data
    mita_table_sizes:
      query: |
        SELECT 
          schemaname,
          tablename,
          pg_total_relation_size(schemaname||'.'||tablename) as size_bytes,
          pg_relation_size(schemaname||'.'||tablename) as table_size_bytes,
          pg_total_relation_size(schemaname||'.'||tablename) - pg_relation_size(schemaname||'.'||tablename) as index_size_bytes
        FROM pg_tables 
        WHERE schemaname NOT IN ('information_schema', 'pg_catalog', 'pg_toast')
      metrics:
        - schemaname:
            usage: "LABEL"
            description: "Schema name"
        - tablename:
            usage: "LABEL"
            description: "Table name"
        - size_bytes:
            usage: "GAUGE"
            description: "Total table size including indexes in bytes"
        - table_size_bytes:
            usage: "GAUGE"
            description: "Table size excluding indexes in bytes"
        - index_size_bytes:
            usage: "GAUGE"
            description: "Total index size in bytes"
    
    # Transaction and user activity metrics
    mita_transaction_activity:
      query: |
        SELECT 
          datname,
          numbackends as active_connections,
          xact_commit as transactions_committed,
          xact_rollback as transactions_rolled_back,
          blks_read as blocks_read,
          blks_hit as blocks_hit,
          tup_returned as tuples_returned,
          tup_fetched as tuples_fetched,
          tup_inserted as tuples_inserted,
          tup_updated as tuples_updated,
          tup_deleted as tuples_deleted
        FROM pg_stat_database 
        WHERE datname = 'mita'
      metrics:
        - datname:
            usage: "LABEL"
            description: "Database name"
        - active_connections:
            usage: "GAUGE"
            description: "Number of active connections"
        - transactions_committed:
            usage: "COUNTER"
            description: "Number of committed transactions"
        - transactions_rolled_back:
            usage: "COUNTER"
            description: "Number of rolled back transactions"
        - blocks_read:
            usage: "COUNTER"
            description: "Number of disk blocks read"
        - blocks_hit:
            usage: "COUNTER"
            description: "Number of buffer hits"
        - tuples_returned:
            usage: "COUNTER"
            description: "Number of rows returned by queries"
        - tuples_fetched:
            usage: "COUNTER"
            description: "Number of rows fetched by queries"
        - tuples_inserted:
            usage: "COUNTER"
            description: "Number of rows inserted"
        - tuples_updated:
            usage: "COUNTER"
            description: "Number of rows updated"
        - tuples_deleted:
            usage: "COUNTER"
            description: "Number of rows deleted"
    
    # Long running queries (financial compliance concern)
    mita_long_running_queries:
      query: |
        SELECT 
          datname,
          count(*) as long_running_queries_count,
          max(EXTRACT(EPOCH FROM (now() - query_start))) as longest_query_seconds
        FROM pg_stat_activity 
        WHERE state = 'active' 
          AND query_start < now() - interval '1 minute'
          AND datname = 'mita'
        GROUP BY datname
      metrics:
        - datname:
            usage: "LABEL"
            description: "Database name"
        - long_running_queries_count:
            usage: "GAUGE"
            description: "Number of queries running longer than 1 minute"
        - longest_query_seconds:
            usage: "GAUGE"
            description: "Duration of longest running query in seconds"
    
    # Index usage efficiency (critical for financial query performance)
    mita_index_usage:
      query: |
        SELECT 
          schemaname,
          tablename,
          indexname,
          idx_scan as index_scans,
          idx_tup_read as index_tuples_read,
          idx_tup_fetch as index_tuples_fetched
        FROM pg_stat_user_indexes
        WHERE schemaname NOT IN ('information_schema', 'pg_catalog')
      metrics:
        - schemaname:
            usage: "LABEL"
            description: "Schema name"
        - tablename:
            usage: "LABEL"
            description: "Table name"
        - indexname:
            usage: "LABEL"
            description: "Index name"
        - index_scans:
            usage: "COUNTER"
            description: "Number of index scans initiated"
        - index_tuples_read:
            usage: "COUNTER"
            description: "Number of index entries returned by scans"
        - index_tuples_fetched:
            usage: "COUNTER"
            description: "Number of table rows fetched by index scans"
    
    # Connection pool and locks monitoring
    mita_connection_states:
      query: |
        SELECT 
          state,
          count(*) as connection_count
        FROM pg_stat_activity 
        WHERE datname = 'mita'
        GROUP BY state
      metrics:
        - state:
            usage: "LABEL"
            description: "Connection state"
        - connection_count:
            usage: "GAUGE"
            description: "Number of connections in this state"
    
    # Lock monitoring for financial transactions
    mita_locks:
      query: |
        SELECT 
          mode,
          count(*) as lock_count
        FROM pg_locks l
        JOIN pg_database d ON l.database = d.oid
        WHERE d.datname = 'mita'
        GROUP BY mode
      metrics:
        - mode:
            usage: "LABEL"
            description: "Lock mode"
        - lock_count:
            usage: "GAUGE"
            description: "Number of locks in this mode"
    
    # Replication lag (critical for financial data consistency)
    mita_replication_lag:
      query: |
        SELECT 
          client_addr,
          application_name,
          state,
          EXTRACT(EPOCH FROM (now() - backend_start)) as connection_duration_seconds,
          CASE 
            WHEN pg_is_in_recovery() THEN NULL
            ELSE EXTRACT(EPOCH FROM (now() - pg_xlog_location_diff(pg_current_xlog_location(), sent_location)/1024/1024))
          END as replication_lag_seconds
        FROM pg_stat_replication
      metrics:
        - client_addr:
            usage: "LABEL"
            description: "Client address"
        - application_name:
            usage: "LABEL"
            description: "Application name"
        - state:
            usage: "LABEL"
            description: "Replication state"
        - connection_duration_seconds:
            usage: "GAUGE"
            description: "Duration of replication connection in seconds"
        - replication_lag_seconds:
            usage: "GAUGE"
            description: "Replication lag in seconds"
    
    # Backup and archival status (financial compliance requirement)
    mita_backup_status:
      query: |
        SELECT 
          CASE 
            WHEN pg_is_in_recovery() THEN 'standby'
            ELSE 'primary'
          END as role,
          EXTRACT(EPOCH FROM (now() - pg_postmaster_start_time())) as uptime_seconds,
          CASE 
            WHEN pg_is_in_recovery() THEN 0
            ELSE 1
          END as is_primary
      metrics:
        - role:
            usage: "LABEL"
            description: "Database role (primary/standby)"
        - uptime_seconds:
            usage: "GAUGE"
            description: "Database uptime in seconds"
        - is_primary:
            usage: "GAUGE"
            description: "1 if primary, 0 if standby"
    
    # Financial table specific metrics
    mita_financial_tables:
      query: |
        SELECT 
          'users' as table_type,
          count(*) as record_count
        FROM users
        UNION ALL
        SELECT 
          'transactions' as table_type,
          count(*) as record_count
        FROM transactions
        UNION ALL
        SELECT 
          'receipts' as table_type,
          count(*) as record_count
        FROM receipts
        UNION ALL
        SELECT 
          'budgets' as table_type,
          count(*) as record_count
        FROM budgets
      metrics:
        - table_type:
            usage: "LABEL"
            description: "Financial table type"
        - record_count:
            usage: "GAUGE"
            description: "Number of records in table"
    
    # Query performance by financial operation type
    mita_query_performance:
      query: |
        SELECT 
          query,
          calls,
          total_time,
          mean_time,
          rows
        FROM pg_stat_statements 
        WHERE query LIKE '%transaction%' 
           OR query LIKE '%budget%' 
           OR query LIKE '%receipt%'
           OR query LIKE '%user%'
        ORDER BY total_time DESC 
        LIMIT 20
      metrics:
        - query:
            usage: "LABEL"
            description: "SQL query"
        - calls:
            usage: "COUNTER"
            description: "Number of times executed"
        - total_time:
            usage: "COUNTER"
            description: "Total time spent in milliseconds"
        - mean_time:
            usage: "GAUGE"
            description: "Mean time per execution in milliseconds"
        - rows:
            usage: "COUNTER"
            description: "Total number of rows retrieved or affected"

---
# ServiceMonitor for PostgreSQL Exporter
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: postgres-exporter
  namespace: monitoring
  labels:
    app.kubernetes.io/name: postgres-exporter
    app.kubernetes.io/component: monitoring
    monitoring.coreos.com/prometheus: "production"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: postgres-exporter
  endpoints:
    - port: http-metrics
      path: /metrics
      interval: 30s
      scrapeTimeout: 10s
      metricRelabelings:
        # Keep only relevant PostgreSQL metrics
        - sourceLabels: [__name__]
          regex: '(pg_.*|mita_.*)'
          action: keep
        # Add environment label
        - targetLabel: environment
          replacement: "production"
        # Add service label
        - targetLabel: service
          replacement: "postgresql"
        # Add instance type
        - targetLabel: instance_type
          replacement: "database"

---
# PrometheusRule for PostgreSQL monitoring alerts
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: postgres-monitoring-alerts
  namespace: monitoring
  labels:
    app.kubernetes.io/name: postgres-exporter
    app.kubernetes.io/component: alerts
    monitoring.coreos.com/prometheus: "production"
spec:
  groups:
    - name: postgresql.rules
      interval: 30s
      rules:
        # PostgreSQL availability
        - alert: PostgreSQLDown
          expr: pg_up == 0
          for: 1m
          labels:
            severity: critical
            team: sre
            business_impact: "service-disruption"
            compliance: "SOX"
          annotations:
            summary: "PostgreSQL instance is down"
            description: "PostgreSQL instance {{ $labels.instance }} has been down for more than 1 minute."
            runbook_url: "https://runbooks.mita.finance/alerts/postgresql-down"
            impact: "Financial data unavailable - complete service outage"
            action: "Check PostgreSQL service health and restart immediately"

        # High connection count
        - alert: PostgreSQLHighConnections
          expr: mita_connection_count > 80
          for: 5m
          labels:
            severity: warning
            team: sre
            business_impact: "performance"
          annotations:
            summary: "High number of PostgreSQL connections"
            description: "PostgreSQL has {{ $value }} active connections."
            runbook_url: "https://runbooks.mita.finance/alerts/postgresql-connections"
            impact: "Potential connection exhaustion and performance degradation"
            action: "Investigate connection leaks and scale connection pool"

        # Long running queries
        - alert: PostgreSQLLongRunningQueries
          expr: mita_long_running_queries_count > 5
          for: 3m
          labels:
            severity: warning
            team: sre
            business_impact: "performance"
          annotations:
            summary: "Multiple long-running queries detected"
            description: "{{ $value }} queries have been running for more than 1 minute."
            runbook_url: "https://runbooks.mita.finance/alerts/long-queries"
            impact: "Database performance degradation and potential locks"
            action: "Investigate slow queries and optimize if necessary"

        # Replication lag
        - alert: PostgreSQLReplicationLag
          expr: mita_replication_lag_seconds > 300
          for: 2m
          labels:
            severity: critical
            team: sre
            business_impact: "disaster-recovery"
            compliance: "business-continuity"
          annotations:
            summary: "PostgreSQL replication lag is high"
            description: "Replication lag is {{ $value }}s, exceeding 5-minute threshold."
            runbook_url: "https://runbooks.mita.finance/alerts/replication-lag"
            impact: "Disaster recovery capabilities compromised"
            action: "Check replication health and network connectivity"

        # High lock count
        - alert: PostgreSQLHighLockCount
          expr: mita_lock_count > 100
          for: 2m
          labels:
            severity: warning
            team: sre
            business_impact: "performance"
          annotations:
            summary: "High number of database locks"
            description: "{{ $value }} locks detected in mode {{ $labels.mode }}."
            runbook_url: "https://runbooks.mita.finance/alerts/database-locks"
            impact: "Potential deadlocks and transaction delays"
            action: "Investigate locking queries and optimize transactions"

        # Table size growth (financial data growth monitoring)
        - alert: MitaFinancialTableGrowth
          expr: increase(mita_table_sizes{tablename=~"transactions|receipts|budgets"}[24h]) > 1073741824  # 1GB
          for: 1h
          labels:
            severity: warning
            team: sre
            business_impact: "capacity-planning"
            compliance: "data-retention"
          annotations:
            summary: "Rapid growth in financial table size"
            description: "Table {{ $labels.tablename }} has grown by {{ $value | humanizeBytes }} in the last 24 hours."
            runbook_url: "https://runbooks.mita.finance/alerts/table-growth"
            impact: "Storage capacity and backup time may be affected"
            action: "Review data retention policies and storage planning"

        # Query performance degradation
        - alert: PostgreSQLSlowQueries
          expr: mita_query_performance_mean_time > 5000  # 5 seconds
          for: 5m
          labels:
            severity: warning
            team: sre
            business_impact: "user-experience"
          annotations:
            summary: "Slow query performance detected"
            description: "Query has mean execution time of {{ $value }}ms."
            runbook_url: "https://runbooks.mita.finance/alerts/slow-queries"
            impact: "User experience degradation and increased response times"
            action: "Analyze and optimize slow queries"

        # Financial data integrity check
        - alert: MitaFinancialDataAnomaly
          expr: rate(mita_financial_tables_record_count[1h]) < 0
          for: 5m
          labels:
            severity: critical
            team: sre
            business_impact: "data-integrity"
            compliance: "SOX"
          annotations:
            summary: "Financial data record count decreased"
            description: "Record count for {{ $labels.table_type }} table has decreased."
            runbook_url: "https://runbooks.mita.finance/alerts/data-integrity"
            impact: "Potential data loss or corruption in financial records"
            action: "URGENT: Investigate data integrity and review recent operations"

---
# Network policy for PostgreSQL Exporter
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: postgres-exporter-network-policy
  namespace: monitoring
  labels:
    app.kubernetes.io/name: postgres-exporter
    app.kubernetes.io/component: network-security
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: postgres-exporter
  policyTypes:
    - Ingress
    - Egress
  ingress:
    # Allow Prometheus to scrape metrics
    - from:
        - podSelector:
            matchLabels:
              app.kubernetes.io/name: prometheus
      ports:
        - protocol: TCP
          port: 9187
    # Allow access from monitoring namespace
    - from:
        - namespaceSelector:
            matchLabels:
              name: monitoring
      ports:
        - protocol: TCP
          port: 9187
  egress:
    # Allow connection to PostgreSQL
    - to: []
      ports:
        - protocol: TCP
          port: 5432
    # Allow DNS resolution
    - to: []
      ports:
        - protocol: UDP
          port: 53
        - protocol: TCP
          port: 53