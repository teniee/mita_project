name: MITA Integration Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'app/**'
      - 'tests/integration/**'
      - 'requirements.txt'
      - '.github/workflows/integration-tests.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'app/**'
      - 'tests/integration/**'
      - 'requirements.txt'
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - fast
          - security
          - mobile
          - performance
      environment:
        description: 'Environment to test against'
        required: true
        default: 'staging'
        type: choice
        options:
          - local
          - staging
          - production

env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.7.1"
  
jobs:
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: mita_test
          POSTGRES_USER: test_user
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    strategy:
      matrix:
        test-suite:
          - name: "Fast & Security Tests"
            args: "--fast --security --parallel"
            timeout: 20
          - name: "Mobile Integration Tests" 
            args: "--mobile --parallel"
            timeout: 30
          - name: "Performance Tests"
            args: "--performance"
            timeout: 45
      fail-fast: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libpq-dev \
          redis-tools \
          postgresql-client \
          curl \
          jq
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-xdist pytest-timeout pytest-cov pytest-html
    
    - name: Wait for services
      run: |
        # Wait for Redis
        timeout 30s bash -c 'until redis-cli -h localhost -p 6379 ping; do sleep 1; done'
        
        # Wait for PostgreSQL
        timeout 30s bash -c 'until pg_isready -h localhost -p 5432 -U test_user; do sleep 1; done'
        
        echo "✅ All services are ready"
    
    - name: Set up test database
      run: |
        export DATABASE_URL="postgresql://test_user:test_password@localhost:5432/mita_test"
        export REDIS_URL="redis://localhost:6379/14"
        
        # Run database migrations (if they exist)
        if [ -f "alembic/env.py" ]; then
          alembic upgrade head || echo "No migrations to run"
        fi
    
    - name: Start MITA API server (background)
      run: |
        export DATABASE_URL="postgresql://test_user:test_password@localhost:5432/mita_test"
        export REDIS_URL="redis://localhost:6379/0"
        export SECRET_KEY="test_secret_key_for_ci"
        export TESTING="true"
        export ENVIRONMENT="test"
        
        # Start the API server in background
        python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        API_PID=$!
        echo "API_PID=$API_PID" >> $GITHUB_ENV
        
        # Wait for API to be ready
        timeout 60s bash -c 'until curl -f http://localhost:8000/api/health 2>/dev/null || curl -f http://localhost:8000/health 2>/dev/null || curl -f http://localhost:8000/ 2>/dev/null; do echo "Waiting for API..."; sleep 2; done'
        
        echo "✅ MITA API server started (PID: $API_PID)"
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/mita_test
        REDIS_URL: redis://localhost:6379/0
    
    - name: Run ${{ matrix.test-suite.name }}
      timeout-minutes: ${{ matrix.test-suite.timeout }}
      run: |
        export DATABASE_URL="postgresql://test_user:test_password@localhost:5432/mita_test"
        export REDIS_URL="redis://localhost:6379/14"
        export INTEGRATION_TEST_BASE_URL="http://localhost:8000/api"
        
        python tests/integration/run_integration_tests.py \
          --ci \
          ${{ matrix.test-suite.args }} \
          --verbose
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/mita_test
        REDIS_URL: redis://localhost:6379/14
        INTEGRATION_TEST_BASE_URL: http://localhost:8000/api
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results-${{ matrix.test-suite.name }}
        path: |
          reports/
          *.log
        retention-days: 30
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.test-suite.name == 'Fast & Security Tests'
      with:
        file: reports/coverage-integration.xml
        flags: integration-tests
        name: Integration Tests Coverage
        fail_ci_if_error: false
    
    - name: Publish test results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: reports/integration-test-results.xml
        check_name: "Integration Test Results (${{ matrix.test-suite.name }})"
        comment_mode: create new
    
    - name: Stop API server
      if: always()
      run: |
        if [ -n "$API_PID" ]; then
          kill $API_PID || true
          sleep 2
          kill -9 $API_PID 2>/dev/null || true
        fi

  security-scan:
    name: Security Integration Scan
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: integration-tests
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety semgrep
    
    - name: Run Bandit security scan
      run: |
        bandit -r app/ tests/integration/ -f json -o reports/bandit-report.json || true
        bandit -r app/ tests/integration/ -f txt
    
    - name: Run Safety vulnerability check
      run: |
        safety check --json --output reports/safety-report.json || true
        safety check
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-results
        path: reports/
        retention-days: 30

  performance-baseline:
    name: Performance Baseline
    runs-on: ubuntu-latest
    timeout-minutes: 45
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: mita_test
          POSTGRES_USER: test_user
        ports:
          - 5432:5432
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-benchmark
    
    - name: Run performance baseline tests
      run: |
        export DATABASE_URL="postgresql://test_user:test_password@localhost:5432/mita_test"
        export REDIS_URL="redis://localhost:6379/0"
        
        # Start API server
        python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        API_PID=$!
        
        # Wait for API
        timeout 60s bash -c 'until curl -f http://localhost:8000/ 2>/dev/null; do sleep 2; done'
        
        # Run performance tests
        python tests/integration/run_integration_tests.py \
          --performance \
          --ci \
          --verbose
        
        # Stop API server
        kill $API_PID || true
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/mita_test
        REDIS_URL: redis://localhost:6379/0
        INTEGRATION_TEST_BASE_URL: http://localhost:8000/api
    
    - name: Store performance baseline
      uses: github/super-linter@v4
      if: always()
      with:
        default-branch: main
        github-token: ${{ secrets.GITHUB_TOKEN }}

  notify-results:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [integration-tests, security-scan]
    if: always()
    
    steps:
    - name: Notify success
      if: ${{ needs.integration-tests.result == 'success' && needs.security-scan.result == 'success' }}
      run: |
        echo "✅ All integration tests passed successfully!"
        # Add notification logic here (Slack, email, etc.)
    
    - name: Notify failure
      if: ${{ needs.integration-tests.result == 'failure' || needs.security-scan.result == 'failure' }}
      run: |
        echo "❌ Integration tests failed!"
        # Add failure notification logic here