# GitHub Actions workflow for deployment with comprehensive Sentry monitoring
name: Deploy MITA Finance with Sentry Monitoring

on:
  push:
    branches: [main, staging]
    tags: ['v*']
  pull_request:
    branches: [main]

env:
  SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
  SENTRY_PROJECT_BACKEND: ${{ secrets.SENTRY_PROJECT_BACKEND }}
  SENTRY_PROJECT_MOBILE: ${{ secrets.SENTRY_PROJECT_MOBILE }}
  SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
  DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
  KUBE_NAMESPACE: ${{ secrets.KUBE_NAMESPACE }}

jobs:
  # Determine deployment environment and version
  prepare:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      version: ${{ steps.version.outputs.version }}
      deploy: ${{ steps.should-deploy.outputs.deploy }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for proper versioning

      - name: Determine Environment
        id: env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" =~ refs/tags/v.* ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "environment=development" >> $GITHUB_OUTPUT
          fi

      - name: Generate Version
        id: version
        run: |
          if [[ "${{ github.ref }}" =~ refs/tags/.* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            TIMESTAMP=$(date +%Y%m%d%H%M%S)
            SHORT_SHA=${GITHUB_SHA:0:8}
            VERSION="auto-${TIMESTAMP}-${SHORT_SHA}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Generated version: $VERSION"

      - name: Should Deploy
        id: should-deploy
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "deploy=false" >> $GITHUB_OUTPUT
          else
            echo "deploy=true" >> $GITHUB_OUTPUT
          fi

  # Backend tests and build
  backend-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run security checks
        run: |
          # Run security scan
          pip install safety bandit
          safety check
          bandit -r app/ -f json -o security-report.json || true

      - name: Run backend tests with coverage
        env:
          DATABASE_URL: postgresql://postgres:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
          ENVIRONMENT: testing
          SENTRY_DSN: ${{ secrets.SENTRY_DSN_BACKEND }}
        run: |
          python -m pytest app/tests/ \
            --cov=app \
            --cov-report=xml \
            --cov-report=html \
            --junitxml=test-results.xml \
            --verbose

      - name: Upload test results to Sentry
        if: always()
        run: |
          if [ -f test-results.xml ]; then
            # Custom script to parse test results and send to Sentry
            python scripts/upload_test_results.py \
              --org $SENTRY_ORG \
              --project $SENTRY_PROJECT_BACKEND \
              --token $SENTRY_AUTH_TOKEN \
              --results test-results.xml \
              --environment ${{ needs.prepare.outputs.environment }}
          fi

      - name: Build Docker image
        run: |
          docker build \
            -t $DOCKER_REGISTRY/mita-backend:${{ needs.prepare.outputs.version }} \
            -t $DOCKER_REGISTRY/mita-backend:latest \
            --build-arg SENTRY_RELEASE=${{ needs.prepare.outputs.version }} \
            --build-arg ENVIRONMENT=${{ needs.prepare.outputs.environment }} \
            .

      - name: Run Docker security scan
        run: |
          # Install and run container security scanner
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy image \
            --format json \
            --output docker-security.json \
            $DOCKER_REGISTRY/mita-backend:${{ needs.prepare.outputs.version }} || true

  # Mobile app build and test
  mobile-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.19.0'

      - name: Cache Flutter dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.pub-cache
            mobile_app/.dart_tool
          key: ${{ runner.os }}-flutter-${{ hashFiles('mobile_app/pubspec.yaml') }}

      - name: Install Flutter dependencies
        working-directory: mobile_app
        run: flutter pub get

      - name: Run Flutter analyzer
        working-directory: mobile_app
        run: flutter analyze --fatal-infos

      - name: Run Flutter tests
        working-directory: mobile_app
        env:
          SENTRY_DSN: ${{ secrets.SENTRY_DSN_MOBILE }}
          ENVIRONMENT: testing
        run: |
          flutter test \
            --coverage \
            --reporter json \
            --file-reporter json:test-results.json

      - name: Build Android APK (staging)
        if: needs.prepare.outputs.environment == 'staging'
        working-directory: mobile_app
        env:
          SENTRY_DSN: ${{ secrets.SENTRY_DSN_MOBILE }}
          SENTRY_RELEASE: ${{ needs.prepare.outputs.version }}
          ENVIRONMENT: ${{ needs.prepare.outputs.environment }}
        run: |
          flutter build apk \
            --release \
            --dart-define=SENTRY_DSN=$SENTRY_DSN \
            --dart-define=SENTRY_RELEASE=$SENTRY_RELEASE \
            --dart-define=ENVIRONMENT=$ENVIRONMENT

      - name: Build iOS (staging)
        if: needs.prepare.outputs.environment == 'staging' && runner.os == 'macOS'
        working-directory: mobile_app
        env:
          SENTRY_DSN: ${{ secrets.SENTRY_DSN_MOBILE }}
          SENTRY_RELEASE: ${{ needs.prepare.outputs.version }}
          ENVIRONMENT: ${{ needs.prepare.outputs.environment }}
        run: |
          flutter build ios \
            --release \
            --no-codesign \
            --dart-define=SENTRY_DSN=$SENTRY_DSN \
            --dart-define=SENTRY_RELEASE=$SENTRY_RELEASE \
            --dart-define=ENVIRONMENT=$ENVIRONMENT

  # Create Sentry release
  sentry-release:
    runs-on: ubuntu-latest
    needs: [prepare, backend-test, mobile-test]
    if: needs.prepare.outputs.deploy == 'true'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install release manager dependencies
        run: |
          pip install requests

      - name: Create Sentry Release
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          RELEASE_VERSION: ${{ needs.prepare.outputs.version }}
          ENVIRONMENT: ${{ needs.prepare.outputs.environment }}
          DEPLOYMENT_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          python scripts/sentry_release_manager.py \
            --org $SENTRY_ORG \
            --project $SENTRY_PROJECT_BACKEND \
            --version $RELEASE_VERSION \
            --environment $ENVIRONMENT \
            --projects $SENTRY_PROJECT_BACKEND $SENTRY_PROJECT_MOBILE \
            create

      - name: Upload Source Maps (if applicable)
        if: needs.prepare.outputs.environment != 'development'
        run: |
          # Upload source maps for better error tracking
          # This would be customized based on your build process
          echo "Source maps upload would go here"

  # Deploy to Kubernetes
  deploy-backend:
    runs-on: ubuntu-latest
    needs: [prepare, backend-test, sentry-release]
    if: needs.prepare.outputs.deploy == 'true'
    environment:
      name: ${{ needs.prepare.outputs.environment }}
      url: ${{ steps.deployment.outputs.url }}
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig \
            --region us-east-1 \
            --name mita-${{ needs.prepare.outputs.environment }}

      - name: Deploy to Kubernetes
        id: deployment
        env:
          VERSION: ${{ needs.prepare.outputs.version }}
          ENVIRONMENT: ${{ needs.prepare.outputs.environment }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN_BACKEND }}
          SENTRY_RELEASE: ${{ needs.prepare.outputs.version }}
        run: |
          # Update Kubernetes deployment with new image
          kubectl set image deployment/mita-backend \
            mita-backend=$DOCKER_REGISTRY/mita-backend:$VERSION \
            -n $KUBE_NAMESPACE

          # Update ConfigMap with Sentry configuration
          kubectl create configmap sentry-config \
            --from-literal=SENTRY_DSN=$SENTRY_DSN \
            --from-literal=SENTRY_RELEASE=$SENTRY_RELEASE \
            --from-literal=ENVIRONMENT=$ENVIRONMENT \
            -n $KUBE_NAMESPACE \
            --dry-run=client -o yaml | kubectl apply -f -

          # Wait for rollout to complete
          kubectl rollout status deployment/mita-backend -n $KUBE_NAMESPACE --timeout=600s

          # Get deployment URL
          DEPLOYMENT_URL=$(kubectl get service mita-backend -n $KUBE_NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          echo "url=https://$DEPLOYMENT_URL" >> $GITHUB_OUTPUT

      - name: Run smoke tests
        env:
          DEPLOYMENT_URL: ${{ steps.deployment.outputs.url }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN_BACKEND }}
        run: |
          # Run post-deployment smoke tests
          python scripts/smoke_tests.py --url $DEPLOYMENT_URL

  # Finalize Sentry release
  sentry-finalize:
    runs-on: ubuntu-latest
    needs: [prepare, deploy-backend]
    if: always() && needs.prepare.outputs.deploy == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: pip install requests

      - name: Create Sentry Deployment
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          RELEASE_VERSION: ${{ needs.prepare.outputs.version }}
          ENVIRONMENT: ${{ needs.prepare.outputs.environment }}
          DEPLOYMENT_URL: ${{ needs.deploy-backend.outputs.url }}
          DEPLOYMENT_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          DEPLOY_STATUS="success"
          if [[ "${{ needs.deploy-backend.result }}" != "success" ]]; then
            DEPLOY_STATUS="failed"
          fi

          python scripts/sentry_release_manager.py \
            --org $SENTRY_ORG \
            --project $SENTRY_PROJECT_BACKEND \
            --version $RELEASE_VERSION \
            --environment $ENVIRONMENT \
            --deployment-url $DEPLOYMENT_URL \
            deploy

          # Send deployment notification
          python scripts/notify_deployment.py \
            --version $RELEASE_VERSION \
            --environment $ENVIRONMENT \
            --status $DEPLOY_STATUS \
            --url $DEPLOYMENT_URL

  # Security and compliance checks
  security-compliance:
    runs-on: ubuntu-latest
    if: needs.prepare.outputs.environment == 'production'
    needs: [prepare, deploy-backend]
    steps:
      - uses: actions/checkout@v4

      - name: Run PCI DSS Compliance Check
        run: |
          # Run compliance validation scripts
          python scripts/compliance_checker.py \
            --environment production \
            --standards pci_dss \
            --sentry-org $SENTRY_ORG \
            --sentry-token $SENTRY_AUTH_TOKEN

      - name: Vulnerability Assessment
        run: |
          # Run security assessment
          python scripts/security_assessment.py \
            --target ${{ needs.deploy-backend.outputs.url }} \
            --environment production

  # Performance monitoring setup
  performance-monitoring:
    runs-on: ubuntu-latest
    needs: [prepare, deploy-backend]
    if: needs.prepare.outputs.deploy == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Configure Performance Monitoring
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          ENVIRONMENT: ${{ needs.prepare.outputs.environment }}
          DEPLOYMENT_URL: ${{ needs.deploy-backend.outputs.url }}
        run: |
          # Set up performance monitoring thresholds
          python scripts/setup_performance_monitoring.py \
            --org $SENTRY_ORG \
            --project $SENTRY_PROJECT_BACKEND \
            --environment $ENVIRONMENT \
            --url $DEPLOYMENT_URL

      - name: Create Performance Baseline
        run: |
          # Create performance baseline for new deployment
          python scripts/performance_baseline.py \
            --url ${{ needs.deploy-backend.outputs.url }} \
            --environment ${{ needs.prepare.outputs.environment }} \
            --version ${{ needs.prepare.outputs.version }}

  # Rollback on failure
  rollback:
    runs-on: ubuntu-latest
    needs: [prepare, deploy-backend, sentry-finalize]
    if: failure() && needs.prepare.outputs.deploy == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig \
            --region us-east-1 \
            --name mita-${{ needs.prepare.outputs.environment }}

      - name: Rollback Deployment
        run: |
          # Rollback to previous version
          kubectl rollout undo deployment/mita-backend -n $KUBE_NAMESPACE
          kubectl rollout status deployment/mita-backend -n $KUBE_NAMESPACE --timeout=300s

      - name: Mark Release as Failed in Sentry
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          RELEASE_VERSION: ${{ needs.prepare.outputs.version }}
        run: |
          python scripts/mark_release_failed.py \
            --org $SENTRY_ORG \
            --project $SENTRY_PROJECT_BACKEND \
            --version $RELEASE_VERSION

      - name: Send Rollback Notification
        env:
          DEPLOYMENT_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          python scripts/notify_rollback.py \
            --version ${{ needs.prepare.outputs.version }} \
            --environment ${{ needs.prepare.outputs.environment }}