name: Security Scanning

on:
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install safety pip-audit

      - name: Run Safety check
        run: |
          safety check --json --output safety-report.json
        continue-on-error: true

      - name: Run pip-audit
        run: |
          pip-audit --format=json --output=pip-audit-report.json
        continue-on-error: true

      - name: Upload vulnerability reports
        uses: actions/upload-artifact@v3
        with:
          name: dependency-reports
          path: |
            safety-report.json
            pip-audit-report.json

  code-security-scan:
    name: Code Security Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: python

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      - name: Run Bandit Security Linter
        run: |
          pip install bandit[toml]
          bandit -r app/ -f json -o bandit-report.json
        continue-on-error: true

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
          generateSarif: "1"

      - name: Upload Semgrep SARIF
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: semgrep.sarif
        if: always()

  docker-security-scan:
    name: Docker Image Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'schedule'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t mita-finance:test .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'mita-finance:test'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Docker Bench Security
        run: |
          git clone https://github.com/docker/docker-bench-security.git
          cd docker-bench-security
          sudo sh docker-bench-security.sh -c container_images -t mita-finance:test

  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run GitLeaks
        uses: zricethezav/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

  compliance-check:
    name: Compliance and Best Practices
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for .env files in repo
        run: |
          if find . -name ".env*" -not -path "./.git/*" -not -name ".env.example" | grep -q .; then
            echo "‚ùå Found .env files in repository!"
            find . -name ".env*" -not -path "./.git/*" -not -name ".env.example"
            exit 1
          else
            echo "‚úÖ No .env files found in repository"
          fi

      - name: Check for hardcoded secrets patterns
        run: |
          # Check for common secret patterns
          PATTERNS=(
            "password\s*=\s*['\"][^'\"]{8,}['\"]"
            "api_key\s*=\s*['\"][^'\"]{20,}['\"]"
            "secret_key\s*=\s*['\"][^'\"]{20,}['\"]"
            "jwt_secret\s*=\s*['\"][^'\"]{20,}['\"]"
          )
          
          for pattern in "${PATTERNS[@]}"; do
            if grep -r -i -E "$pattern" app/ --exclude-dir=tests; then
              echo "‚ùå Found potential hardcoded secret: $pattern"
              exit 1
            fi
          done
          echo "‚úÖ No hardcoded secrets detected"

      - name: Check Dockerfile security
        run: |
          # Check if running as root user
          if grep -q "USER root" Dockerfile; then
            echo "‚ùå Dockerfile runs as root user"
            exit 1
          fi
          
          # Check if non-root user is specified
          if ! grep -q "USER " Dockerfile; then
            echo "‚ùå Dockerfile doesn't specify non-root user"
            exit 1
          fi
          
          echo "‚úÖ Dockerfile security checks passed"

  notify-security-team:
    name: Notify Security Team
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-security-scan, docker-security-scan, secrets-scan]
    if: failure() && github.event_name == 'schedule'
    
    steps:
      - name: Send security alert
        run: |
          curl -X POST "${{ secrets.SECURITY_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            -d "{
              \"message\": \"üö® MITA Finance Security Scan Failed\",
              \"details\": \"Daily security scan detected vulnerabilities\",
              \"repository\": \"${{ github.repository }}\",
              \"run_url\": \"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\",
              \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"
            }"