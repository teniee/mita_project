name: Python CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Start Postgres
        run: |
          docker run -d --name pg -e POSTGRES_PASSWORD=postgres -e POSTGRES_DB=mita -p 5432:5432 postgres:15
          for i in {1..10}; do
            docker exec pg pg_isready && break
            sleep 2
          done

      - name: Enhanced migration testing
        env:
          DATABASE_URL: postgresql+psycopg2://postgres:postgres@localhost:5432/mita
          TEST_DATABASE_URL: postgresql+psycopg2://postgres:postgres@localhost:5432/mita_test
        run: |
          # Create test database for migration validation
          docker exec pg createdb -U postgres mita_test
          
          # Test migration from clean state
          echo "Testing migration from clean state..."
          alembic upgrade head
          
          # Test idempotency - run migrations again
          echo "Testing migration idempotency..."
          alembic upgrade head
          
          # Test rollback functionality
          echo "Testing rollback functionality..."
          alembic downgrade 0003_goals
          alembic upgrade head
          
          # Validate financial data types
          echo "Validating financial data types..."
          python -c "
          import psycopg2
          import os
          conn = psycopg2.connect(os.environ['DATABASE_URL'])
          cur = conn.cursor()
          
          # Check that financial columns use Numeric, not Float
          cur.execute('''
              SELECT table_name, column_name, data_type, numeric_precision, numeric_scale
              FROM information_schema.columns 
              WHERE table_schema = 'public' 
              AND column_name IN ('amount', 'target_amount', 'saved_amount', 'annual_income')
              AND data_type != 'numeric'
          ''')
          
          float_columns = cur.fetchall()
          if float_columns:
              print('ERROR: Found non-numeric columns for financial data:')
              for row in float_columns:
                  print(f'  {row[0]}.{row[1]} is {row[2]}')
              exit(1)
          
          print('✅ All financial columns use proper Numeric type')
          
          # Check for required precision/scale
          cur.execute('''
              SELECT table_name, column_name, numeric_precision, numeric_scale
              FROM information_schema.columns 
              WHERE table_schema = 'public' 
              AND column_name IN ('amount', 'target_amount', 'saved_amount', 'annual_income')
              AND data_type = 'numeric'
              AND (numeric_precision IS NULL OR numeric_scale IS NULL)
          ''')
          
          imprecise_columns = cur.fetchall()
          if imprecise_columns:
              print('WARNING: Found numeric columns without explicit precision/scale:')
              for row in imprecise_columns:
                  print(f'  {row[0]}.{row[1]} precision={row[2]}, scale={row[3]}')
          
          conn.close()
          "
          
          echo "✅ Migration testing completed successfully"

      - name: Lint & style
        run: |
          black --check .
          isort --check .
          ruff .

      - name: Fail on Cyrillic characters
        run: |
          if grep -rIn --exclude-dir=.git --exclude-dir=docs/legacy -P "[\p{Cyrillic}]" .; then
            echo "Cyrillic characters detected"
            exit 1
          fi

      - name: Tests with coverage
        run: |
          export PYTHONPATH=.
          pytest --cov=app --cov-report=xml --cov-report=term --cov-fail-under=65

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: coverage.xml

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.repository }}/mita-backend:latest
